# Utility: MDX query parsing functions
test_get_cube_name_from_mdx:
  -
    mdx_query:
      "FROM [Cost and FTE by Groups]"

test_mdx_filter_to_dictionary:
  -
    mdx_query:
      "WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"
  -
    mdx_query:
      "WHERE 
          (
           [Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"
  -
    mdx_query:
      ""

test_get_kwargs_dict_from_set_mdx_list_success:
  -
    # Basic example from prompt
    set_mdx_list: [
      "{[Periods].[Periods].[2024]}",
      "{Tm1FilterbyLevel({Tm1DrillDownMember({[Versions].[All Versions]}, ALL, RECURSIVE)}, 0)}"
    ]
    expected_kwargs: {
      "periods": "{[Periods].[Periods].[2024]}",
      "versions": "{Tm1FilterbyLevel({Tm1DrillDownMember({[Versions].[All Versions]}, ALL, RECURSIVE)}, 0)}"
    }
  -
    # Case variation and spaces in dimension name
    set_mdx_list: [
      "{[ Product Category ] . [ Members ] . [ All ] }",
      "{ [TIME DIM   ].[H1].[Q1]}"
    ]
    expected_kwargs: {
      "productcategory": "{[ Product Category ] . [ Members ] . [ All ] }",
      "timedim": "{ [TIME DIM   ].[H1].[Q1]}"
    }
  -
    # Underscores and numbers in dimension name
    set_mdx_list: [
      "{[Sales_Region].[North America]}",
      "{[Scenario 1].[Actual]}"
    ]
    expected_kwargs: {
      "sales_region": "{[Sales_Region].[North America]}",
      "scenario1": "{[Scenario 1].[Actual]}"
    }
  -
    # Mix of valid and invalid/non-matching strings
    set_mdx_list: [
      "{[Geography].[City].[London]}",
      "This is just a string",
      "{[Account].[Net Income]}",
      "{Malformed Structure]"
    ]
    expected_kwargs: {
      "geography": "{[Geography].[City].[London]}",
      "account": "{[Account].[Net Income]}"
    }
  -
    # Duplicate keys (after normalization) - last one should win
    set_mdx_list: [
      "{[ Measures ].[Sales Amount]}",
      "{[ Measures].[Units Sold]}" # This should overwrite the previous "measures"
    ]
    expected_kwargs: {
      "measures": "{[ Measures].[Units Sold]}"
    }
  -
    # Duplicate keys (after normalization, different original case/spacing) - last one should win
    set_mdx_list: [
      "{[department].[HR]}",
      "{[ Department ].[Finance]}" # This should overwrite the previous "department"
    ]
    expected_kwargs: {
      "department": "{[ Department ].[Finance]}"
    }

test_get_kwargs_dict_from_set_mdx_list_filtering:
  -
    set_mdx_list: []
    expected_kwargs: {}
  -
    set_mdx_list: [
      "Just a plain string",
      "Another string without the pattern",
      "12345"
    ]
    expected_kwargs: {}
  -
    set_mdx_list: [
      "{Dimension.Member}",
      "[Dimension].[Member]",
      "{[ Dimension Name ]",
      " { [ Dim ] } extra text"
    ]
    expected_kwargs: {
       "dimensionname": "{[ Dimension Name ]",
       "dim": " { [ Dim ] } extra text"
    }
  -
    set_mdx_list: [
      "{Dimension.Member}",
      "[Dimension].[Member]",
      "{[ Dimension Name ]",
      "{ [ ] }",
      "{ [ No Closing Bracket "
    ]
    expected_kwargs: {
        "dimensionname": "{[ Dimension Name ]",
        "": "{ [ ] }"
    }
  -
    set_mdx_list: ["", "   "]
    expected_kwargs: {}
  -
    set_mdx_list: [None, "{[ValidDim].[Value]}"]
    expected_kwargs: {
       "validdim": "{[ValidDim].[Value]}"
    }

test_get_dimensions_from_set_mdx_list_success:
  -
    mdx_sets: [
        "{[Periods].[Periods].[2024]}",
        "{ [Versions] .[ Actual ] }"
      ]
    expected_dimensions: ["Periods", "Versions"]
  -
    mdx_sets: [
        "{[Time].[Year].[2023]}",
        "invalid string",
        "{[ Geography ].[ Continent ].[Asia]}",
        "{[Product]}"
      ]
    expected_dimensions: ["Time", "Geography", "Product"]
  -
    mdx_sets: [
        "{ [ Measures ] . [ Sales ] }",
        "{ [ Measures ] . [ Units ] }"
      ]
    expected_dimensions: ["Measures", "Measures"]
  -
    mdx_sets: []
    expected_dimensions: []
  -
    mdx_sets: null
    expected_dimensions: []
  -
    mdx_sets: ["No Match", "Another Miss"]
    expected_dimensions: []
  -
    mdx_sets: ["{[Dim1]}", null, "{[Dim2].[Hier]}", "{[ Dim 3 ]}"]
    expected_dimensions: ["Dim1", "Dim2", "Dim 3"]
  -
    mdx_sets: ["{[].[Element]}", "{[ Dim4 ]}"]
    expected_dimensions: ["Dim4"]


test_get_dimensions_from_set_mdx_list_failure:
  -
    mdx_sets: "not a list"
    expected_exception: "TypeError"
    expected_message_part: "Expected mdx_sets to be a list"
  -
    mdx_sets: 123
    expected_exception: "TypeError"
    expected_message_part: "Expected mdx_sets to be a list"
  -
    mdx_sets: ["[Dim1]", 123, "[Dim3]"]
    expected_exception: "TypeError"
    expected_message_part: "Expected elements of mdx_sets to be strings"
  -
    mdx_sets: [!!binary "Ynl0ZXM=", "{[Dim2]}"]
    expected_exception: "TypeError"
    expected_message_part: "Expected elements of mdx_sets to be strings"


test_generate_cartesian_product_success:
  -
    list_of_lists: [["a", "b"], [1, 2]]
    expected_product: [["a", 1], ["a", 2], ["b", 1], ["b", 2]]
  -
    list_of_lists: [[True, False], ["x"]]
    expected_product: [[True, "x"], [False, "x"]]
  -
    list_of_lists: [["one"], ["two"], ["three"]]
    expected_product: [["one", "two", "three"]]
  -
    list_of_lists: [[1, 2], [], [3, 4]]
    expected_product: []
  -
    list_of_lists: [["a", "b"]]
    expected_product: [["a"], ["b"]]
  -
    list_of_lists: []
    expected_product: []
  -
    list_of_lists: null
    expected_product: []
  -
    list_of_lists: [[10], [null, 20], [30]]
    expected_product: [[10, null, 30], [10, 20, 30]]


test_generate_cartesian_product_failure:
  -
    list_of_lists: "not a list"
    expected_exception: "TypeError"
    expected_message_part: "Input must be a list"
  -
    list_of_lists: 123
    expected_exception: "TypeError"
    expected_message_part: "Input must be a list"
  -
    list_of_lists: {"a": 1}
    expected_exception: "TypeError"
    expected_message_part: "Input must be a list"
  -
    list_of_lists: [[1, 2], 3, [4, 5]]
    expected_exception: "TypeError"
    expected_message_part: "'int' object is not iterable"
  -
    list_of_lists: [["a", "b"], ["c", "d"], 100]
    expected_exception: "TypeError"
    expected_message_part: "'int' object is not iterable"
  -
    list_of_lists: [[1], [2], null, [4]]
    expected_exception: "TypeError"
    expected_message_part: "'NoneType' object is not iterable"


test_generate_element_lists_from_set_mdx_list_success:
  -
    set_mdx_list: [
      "{TM1FILTERBYLEVEL({DRILLDOWNMEMBER({[Periods].[Periods].[2024]}, {[Periods].[Periods].[2024]})}, 0)}",
      "{[Versions].[Versions].[Base Plan], [Versions].[Versions].[Budget]}"
    ]
    expected_result: [
      ["202401", "202402", "202403", "202404", "202405", "202406", "202407", "202408", "202409", "202410", "202411", "202412"],
      ["Base Plan", "Budget"]
    ]

test_generate_element_lists_from_set_mdx_list_failure:
  -
    use_none_service: true
    set_mdx_list: ["Query1"]
    expected_exception: "ValueError"
    expected_message_part: "tm1_service cannot be None"
  -
    use_none_service: false
    set_mdx_list: "not a list"
    expected_exception: "TypeError"
    expected_message_part: "Expected set_mdx_list to be a list"
  -
    use_none_service: false
    set_mdx_list: ["{[Versions].[Versions].[Base Plan], [Versions].[Versions].[Budget]}", 123]
    expected_exception: "TypeError"
    expected_message_part: "Expected elements of set_mdx_list to be strings"
  -
    use_none_service: false
    set_mdx_list: ["MDX_FOR_INDEX_ERROR"]
    expected_exception: "TM1pyRestException"
    expected_message_part: "Text: '{\"error\":{\"code\":\"501\",\"message\":\"Could not create MDX Set.\"}}' - Status Code: 400 - Reason: 'Bad Request' - Headers: {'Content-Length': '79', 'Connection': 'keep-alive', 'Content-Encoding': 'gzip', 'Cache-Control': 'no-cache', 'Content-Type': 'application/json; charset=utf-8', 'OData-Version': '4.0'}"


test_utility_float_casting_values:
  -
    input_value: 12.48
    expected_value: 12.48
  -
    input_value: "12.48"
    expected_value: 12.48
  -
    input_value: "12,48"
    expected_value: 12.48
  -
    input_value: 12
    expected_value: 12.0
  -
    input_value: "test string 123"
    expected_value: "test string 123"

test_utility_float_casting_types:
  -
    input_value: 12.48
    expected_type: "<class 'numpy.float64'>"
  -
    input_value: "12.48"
    expected_type: "<class 'numpy.float64'>"
  -
    input_value: "12,48"
    expected_type: "<class 'numpy.float64'>"
  -
    input_value: 12
    expected_type: "<class 'numpy.float64'>"
  -
    input_value: "test string 123"
    expected_type: "<class 'str'>"

test_add_nonempty_to_mdx_all_modes:
  -
    input_mdx: "
    SELECT
    { [Measures].[Sales Amount],
    [Measures].[Tax Amount] } ON COLUMNS,
    { [Date].[Fiscal].[Fiscal Year].&[2002],
    [Date].[Fiscal].[Fiscal Year].&[2003] } ON ROWS
    FROM [Adventure Works]
    WHERE ( [Sales Territory].[Southwest] )
    "
    expected_mdx: "
    SELECT
      NON EMPTY { [Measures].[Sales Amount],
    [Measures].[Tax Amount] } ON COLUMNS,
      NON EMPTY { [Date].[Fiscal].[Fiscal Year].&[2002],
    [Date].[Fiscal].[Fiscal Year].&[2003] } ON ROWS
    FROM [Adventure Works]
    WHERE ( [Sales Territory].[Southwest] )
    "
  -
    input_mdx: "
    SELECT
        { [Measures].[Sales Amount] } ON 0,
        { [Date].[Fiscal Year].Members } ON 1
    FROM [My Cube]
    "
    expected_mdx: "
    SELECT
          NON EMPTY { [Measures].[Sales Amount] } ON 0,
          NON EMPTY { [Date].[Fiscal Year].Members } ON 1
    FROM [My Cube]
    "
  -
    input_mdx: "
    SELECT
    { [ Measures ].[ Amount ] } ON 0,
    { [Date].[Year].Members } ON 1,
    { [Region].[Country].Members } ON 2
    FROM [Sales Cube]
    "
    expected_mdx: "
    SELECT
     NON EMPTY { [Measures].[Amount] } ON 0,
     NON EMPTY { [Date].[Year].Members } ON 1,
     NON EMPTY { [Region].[Country].Members } ON 2
    FROM [Sales Cube]
    "
  -
    input_mdx: "
    SELECT
    
    { [ A ] }    ON   COLUMNS   ,
    
    { [B] }
    ON
    1
    FROM    [Cube]
    "
    expected_mdx: "
    SELECT
    
     NON EMPTY { [A] }    ON   COLUMNS   ,
    
     NON EMPTY { [B] }
    ON
    1
    FROM    [Cube]
    "
  -
    input_mdx: "
    SELECT
     NON EMPTY { [Measures].[Sales Amount] } ON COLUMNS,
    { [Date].[Fiscal Year].Members } ON ROWS
    FROM [Adventure Works]
    "
    expected_mdx: "
    SELECT
     NON EMPTY { [Measures].[Sales Amount] } ON COLUMNS,
     NON EMPTY { [Date].[Fiscal Year].Members } ON ROWS
    FROM [Adventure Works]
    "
  -
    input_mdx: "
    SELECT
    { [Measures].[Sales Amount] } ON 0,
     NON EMPTY { [Date].[Fiscal Year].Members } ON 1
    FROM [Adventure Works]
    "
    expected_mdx: "
    SELECT
     NON EMPTY { [Measures].[Sales Amount] } ON 0,
     NON EMPTY { [Date].[Fiscal Year].Members } ON 1
    FROM [Adventure Works]
    "
  -
    input_mdx: "
    SELECT
     NON EMPTY { [Measures].[Sales Amount] } ON COLUMNS,
     NON EMPTY { [Date].[Fiscal Year].Members } ON ROWS
    FROM [Adventure Works]
    "
    expected_mdx: "
    SELECT
     NON EMPTY { [Measures].[Sales Amount] } ON COLUMNS,
     NON EMPTY { [Date].[Fiscal Year].Members } ON ROWS
    FROM [Adventure Works]
    "
  -
    input_mdx: "
    select
    { [ A ] } on columns,
    { [B] } On rOwS
    from [Cube]
    "
    expected_mdx: "
    select
     NON EMPTY { [A] } on columns,
     NON EMPTY { [B] } On rOwS
    from [Cube]
    "
  -
    input_mdx: "
    SELECT
     non empty { [Measures].[Sales Amount] } ON COLUMNS, -- Should not add another
    { [ Date ].[ Fiscal Year ].Members } ON ROWS
    FROM [Adventure Works]
    "
    expected_mdx: "
    SELECT
     non empty { [Measures].[Sales Amount] } ON COLUMNS, -- Should not add another
     NON EMPTY { [Date].[Fiscal Year].Members } ON ROWS
    FROM [Adventure Works]
    "
  -
    input_mdx: "
    WITH MEMBER Measures.X AS 1
    SELECT
    { [ Measures ].[ Sales Amount ] } ON 0,
    { [Date].[Fiscal Year].Members } ON 1
    FROM [My Cube]
    "
    expected_mdx: "
    WITH MEMBER Measures.X AS 1
    SELECT
     NON EMPTY { [Measures].[Sales Amount] } ON 0,
     NON EMPTY { [Date].[Fiscal Year].Members } ON 1
    FROM [My Cube]
    "
  -
    input_mdx: "
    SELECT
    { Filter({[Product].[Product].Members}, [Measures].[Sales] > 100) } ON 0,
    { [Customer].[City].Members } ON 1
    FROM [Sales]
    "
    expected_mdx: "
    SELECT
     NON EMPTY { Filter({[Product].[Product].Members}, [Measures].[Sales] > 100) } ON 0,
     NON EMPTY { [Customer].[City].Members } ON 1
    FROM [Sales]
    "
  -
    input_mdx: "
    SELECT
    FROM [Adventure Works]
    WHERE ( [Sales Territory].[Southwest] )
    "
    expected_mdx: "
    SELECT
    FROM [Adventure Works]
    WHERE ( [Sales Territory].[Southwest] )
    "


# Utility: Cube metadata collection using input MDXs and/or other cubes
test_tm1_cube_object_metadata_collect_based_on_cube_name_success:
  -
    cube_name: "Group Employee"
  -
    cube_name: "Employee Organization"

test_tm1_cube_object_metadata_collect_based_on_cube_name_fail:
  -
    cube_name: "Group Employees"
    exception: TM1pyRestException
  -
    cube_name: ["Group Employee"]
    exception: TM1pyRestException
  -
    cube_name: 101
    exception: TM1pyRestException
  -
    cube_name: ""
    exception: TM1pyRestException

test_tm1_cube_object_metadata_collect_based_on_mdx_name_success:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"

test_tm1_cube_object_metadata_collect_based_on_mdx_name_fail:
    -
      data_mdx: ""
      exception: TM1pyRestException
    -
      data_mdx: 1011
      exception: TypeError
    -
      data_mdx: "Group Employee"
      exception: ValueError
    -
      data_mdx: {"Versions": {"Base Plan": "TM1py Test Version"}}
      exception: TypeError

test_tm1_cube_object_metadata_collect_cube_dimensions_not_empty:
  -
    cube_name: "Group Employee"

test_tm1_cube_object_metadata_collect_cube_dimensions_match_dimensions:
  -
    cube_name: "Group Employee"
    expected_dimensions: ['Groups', 'Employees', 'Measures Group Employee']

test_tm1_cube_object_metadata_collect_filter_dict_not_empty:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"

test_tm1_cube_object_metadata_collect_filter_dict_match:
  -
    data_mdx:
        "SELECT 
             {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
             [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
             [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
             [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
            ON COLUMNS , 
             {[Groups].[Groups].Members}
             * {[Employees].[Employees].Members} 
            ON ROWS 
          FROM [Cost and FTE by Groups] 
          WHERE 
            (
             [Versions].[Versions].[Base Plan], 
             [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
             [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
            )"
    expected_filter_dict: {
      "Versions":"Base Plan",
      "Lineitems Cost and FTE by Groups":"FTE",
      "Measures Cost and FTE by Groups":"Value"
    }

# Main: MDX query to normalized pandas dataframe functions
example_data_mdx:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"

test_build_mdx_from_cube_filter_is_valid_format_true:
  -
    cube_filter: {"Versions": {"Base Plan": "TM1py Test Version"}}
    cube_name: "Cost and FTE by Groups"
    expected_mdx:
      "SELECT\r\n
         {[versions].[versions].[baseplan]} DIMENSION PROPERTIES MEMBER_NAME ON 0,\r\n
         {TM1FILTERBYLEVEL({TM1SUBSETALL([groups].[groups])},0)} *
         {TM1FILTERBYLEVEL({TM1SUBSETALL([periods].[periods])},0)} *
         {TM1FILTERBYLEVEL({TM1SUBSETALL([employees].[employees])},0)} *
         {TM1FILTERBYLEVEL({TM1SUBSETALL([lineitemscostandftebygroups].[lineitemscostandftebygroups])},0)}
         *
         {TM1FILTERBYLEVEL({TM1SUBSETALL([measurescostandftebygroups].[measurescostandftebygroups])},0)}
         DIMENSION PROPERTIES MEMBER_NAME ON 1\r\n
         FROM [costandftebygroups]"

test_mdx_to_dataframe_execute_query_success:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"
  -
    data_mdx:
     "SELECT\r\n
         {[versions].[versions].[baseplan]} DIMENSION PROPERTIES MEMBER_NAME ON 0,\r\n
         {TM1FILTERBYLEVEL({TM1SUBSETALL([groups].[groups])},0)} *
         {TM1FILTERBYLEVEL({TM1SUBSETALL([periods].[periods])},0)} *
         {TM1FILTERBYLEVEL({TM1SUBSETALL([employees].[employees])},0)} *
         {TM1FILTERBYLEVEL({TM1SUBSETALL([lineitemscostandftebygroups].[lineitemscostandftebygroups])},0)}
         *
         {TM1FILTERBYLEVEL({TM1SUBSETALL([measurescostandftebygroups].[measurescostandftebygroups])},0)}
         DIMENSION PROPERTIES MEMBER_NAME ON 1\r\n
         FROM [costandftebygroups]"

test_mdx_to_dataframe_execute_query_fail:
  -
    data_mdx:
      "    {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"
  -
    data_mdx: ""

test_normalize_dataframe_is_dataframe_true:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"

test_normalize_dataframe_match_number_of_dimensions_success:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"
    expected_dimensions: 7

test_normalize_dataframe_match_dimensions_success:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"
    expected_dimensions: ['Groups', 'Versions', 'Periods', 'Employees', 'Lineitems Cost and FTE by Groups', 'Measures Cost and FTE by Groups', 'Value']

test_build_mdx_from_cube_filter_create_dataframe_success:
  -
    cube_filter: {"Versions": {"Base Plan": "TM1py Test Version"}}
    cube_name: "Cost and FTE by Groups"


test_dataframe_filter_inplace:
  -
    dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
      "Value": [ 1, 0, 1 ],
    }
    filter_condition: { "Orgunit": "ASD123" }
    expected_dataframe: {
      "Versions": [ "Base Plan", "Plan1" ],
      "Orgunit": [ "ASD123", "ASD123" ],
      "Value": [ 1, 0 ],
    }

test_dataframe_filter:
  -
    dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
      "Value": [ 1, 0, 1 ],
    }
    filter_condition: { "Orgunit": "ASD123" }
    expected_dataframe: {
      "Versions": [ "Base Plan", "Plan1" ],
      "Orgunit": [ "ASD123", "ASD123" ],
      "Value": [ 1, 0 ],
    }

test_dataframe_drop_column:
  -
    dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
      "Value": [ 1, 0, 1 ]
    }
    column_list: ["Orgunit"]
    expected_dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Value": [ 1, 0, 1 ]
    }

test_dataframe_redimension_scale_down:
  -
    dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
      "Value": [ 1, 0, 1 ]
    }
    filter_condition: { "Orgunit": "ASD123" }
    expected_dataframe: {
      "Versions": [ "Base Plan", "Plan1" ],
      "Value": [ 1, 0]
    }
  -
    dataframe: {
    "Versions": [ "Base Plan", "Plan1", "Plan2" ],
    "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
    "Value": [ 1, 0, 1 ]
  }
    filter_condition: { "Orgunit": "XYZ123" }
    expected_dataframe: {
      "Versions": [ "Plan2" ],
      "Value": [ 1 ]
    }

test_dataframe_relabel:
  -
    dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
      "Value": [ 1, 0, 1 ]
    }
    columns: { "Orgunit": "Orgunit2" }
    expected_columns: ["Versions", "Orgunit2", "Value"]
  -
    dataframe: {
    "Versions": [ "Base Plan", "Plan1", "Plan2" ],
    "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
    "Value": [ 1, 0, 1 ]
  }
    columns: { "Orgunit": "Orgunit2", "Versions": "Base Version" }
    expected_columns: [ "Base Version", "Orgunit2", "Value" ]


test_dataframe_add_column_assign_value:
  -
    dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
    }
    column_values: { "Employee": "Alice" }
    expected_dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
      "Employee": ["Alice", "Alice", "Alice"],
    }

test_dataframe_redimension_and_transform:
  -
    dataframe: {
      "Versions": [ "Base Plan", "Plan1", "Plan2" ],
      "Period": ["202401", "202402", "202402"],
      "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
    }
    source_dim_mapping: { "Orgunit": "ASD123" }
    related_dimensions: { "Versions": "Base Versions" }
    target_dim_mapping: { "Employee": "Alice" }
    expected_dataframe: {
      "Base Versions": [ "Base Plan", "Plan1" ],
      "Period": [ "202401", "202402" ],
      "Employee": ["Alice", "Alice"],
    }
  -
    dataframe: {
    "Versions": [ "Base Plan", "Plan1", "Plan2" ],
    "Period": [ "202401", "202402", "202402" ],
    "Orgunit": [ "ASD123", "ASD123", "XYZ123" ],
  }
    source_dim_mapping: { "Orgunit": "ASD123", "Period": "202402"}
    related_dimensions: { "Versions": "Base Versions" }
    target_dim_mapping: { "Employee": "Alice" }
    expected_dataframe: {
      "Base Versions": [ "Plan1" ],
      "Employee": [ "Alice" ],
    }

test_dataframe_reorder_dimensions:
  -
    dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120, 120, 120, 120 ]
    }
    cube_cols: ["Period", "OrgUnit", "Employee", "Measure"]
    expected_dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120, 120, 120, 120 ]
    }

test_dataframe_force_float64_on_numerical_values:
  -
    dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120, 120, 120, 120 ]
    }
    expected_dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120.0, 120.0, 120.0, 120.0 ]
    }
  -
    dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ "120,0", "120,0", "120,0", "120,0" ]
    }
    expected_dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120.0, 120.0, 120.0, 120.0 ]
    }
  -
    dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120.0, 120.0, 120.0, 120.0 ]
    }
    expected_dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120.0, 120.0, 120.0, 120.0 ]
    }
  -
    dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ "cost", "cost", "cost", "cost" ]
    }
    expected_dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ "cost", "cost", "cost", "cost" ]
    }

test_dataframe_value_scale:
  -
    dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "Value": [ 120, 120, 120, 120 ]
    }
    # after add one, multiply by two
    expected_dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "Value": [ 242, 242, 242, 242 ]
    }

test_dataframe_itemskip_elements:
  -
    source: {
      "A": [ "apple", "banana", "cherry", "date" ],
      "B": [ "x", "y", "z", "w" ],
      "Value": [ 10, 20, 30, 40 ]
    }
    check1: {"A": ["apple", "cherry"]}
    check2: {"B": ["x", "y"]}
    expected: {
      "A": [ "apple" ],
      "B": [ "x" ],
      "Value": [ 10 ]
    }

# Main: tests for dataframe remapping and copy functions
test_dataframe_find_and_replace_success:
  -
    dataframe: { "Versions": ["Base Plan", "Plan1"]}
    mapping: { "Versions": {"Base Plan":"TM1py Test Version"} }
    expected_dataframe: { "Versions": [ "TM1py Test Version", "Plan1" ] }
  -
    dataframe: { "Versions": ["Base Plan", "Plan1"]}
    mapping: { "Versions": {"Base Plan":"TM1py Test Version", "Plan1": "Plan2"} }
    expected_dataframe: { "Versions": [ "TM1py Test Version", "Plan2" ] }

test_dataframe_find_and_replace_fail:
  -
    dataframe: { "Versions": ["Base Plan"]}
    mapping: {}
    expected_dataframe: { "Versions": [ "TM1py Test Version" ] }
  -
    dataframe: { "Versions": ["Base Plan"]}
    mapping: { "Versions": {} }
    expected_dataframe: { "Versions": [ "TM1py Test Version" ] }
  -
    dataframe: { "Versions": ["Plan"]}
    mapping: { "Versions": {"Base Plan":"TM1py Test Version"} }
    expected_dataframe: { "Versions": [ "TM1py Test Version" ] }
  -
    dataframe: { "Versions": []}
    mapping: { "Versions": {"Base Plan":"TM1py Test Version"} }
    expected_dataframe: { "Versions": [ "TM1py Test Version" ] }
  -
    dataframe: {}
    mapping: { "Versions": {"Base Plan":"TM1py Test Version"} }
    expected_dataframe: { "Versions": [ "TM1py Test Version" ] }

test_dataframe_replace_success:
  -
    dataframe: {
      "period": ["202202", "202203", "202202", "202203"],
      "dim_to_map": ["source1", "source2", "other", "other"],
      "dim2_to_map": ["source3", "other", "source3", "other"],
      "measure": ["value", "value", "value", "value"],
      "value": [100, 100, 100, 100]
    }
    mapping: {
      "dim_to_map": { "source1": "target1", "source2": "target2" },
      "dim2_to_map": { "source3": "target3" }
    }
    expected_dataframe: {
      "period": ["202202", "202203", "202202", "202203"],
      "dim_to_map": ["target1", "target2", "other", "other"],
      "dim2_to_map": ["target3", "other", "target3", "other"],
      "measure": ["value", "value", "value", "value"],
      "value": [100, 100, 100, 100]
    }

test_dataframe_map_and_replace_success:
  -
    dataframe: {
      "Period": ["202202", "202202", "202202", "202202"],
      "Employee": ["00000001", "00000002", "00000003", "00000004"],
      "OrgUnit": ["ABC123A", "ABC123A", "XYZ123X", "XYZ123X"],
      "Measure": ["Value", "Value", "Value", "Value"],
      "Value": [120, 120, 120, 120]
    }
    mapping_dataframe: {
      "Period": ["202202", "202202", "202202", "202202"],
      "Employee": ["00000001", "00000002", "00000003", "00000004"],
      "Employee Settings": ["ORG_UNIT_PARENT", "ORG_UNIT_PARENT", "ORG_UNIT_PARENT", "ORG_UNIT_PARENT"],
      "Value": ["AAA0001", "AAA0002", "AAA0001", "AAA0002"]
    }
    mapping_dimensions: {
      "OrgUnit": "Value"
    }
    expected_dataframe: {
      "Period": ["202202", "202202", "202202", "202202"],
      "Employee": ["00000001", "00000002", "00000003", "00000004"],
      "OrgUnit": ["AAA0001", "AAA0002", "AAA0001", "AAA0002"],
      "Measure": ["Value", "Value", "Value", "Value"],
      "Value": [120, 120, 120, 120]
    }
  -
    dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "OrgUnit": [ "ABC123A", "ABC123A", "XYZ123X", "XYZ123X" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120, 120, 120, 120 ]
    }
    mapping_dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "OrgUnit": ["AAA0001", "AAA0002", "AAA0001", "AAA0002"],
      "Value": [1, 1, 1, 1]
    }
    mapping_dimensions: {
      "OrgUnit": "OrgUnit"
    }
    expected_dataframe: {
      "Period": [ "202202", "202202", "202202", "202202" ],
      "Employee": [ "00000001", "00000002", "00000003", "00000004" ],
      "OrgUnit": [ "AAA0001", "AAA0002", "AAA0001", "AAA0002" ],
      "Measure": [ "Value", "Value", "Value", "Value" ],
      "Value": [ 120, 120, 120, 120 ]
    }

test_dataframe_map_and_join_success:
  -
    dataframe: {
      "Period": ["202201", "202201", "202202", "202202"],
      "Employee": ["00000001", "00000002", "00000001", "00000002"],
      "Orgunit": ["abc123a", "abc123a", "def345a", "def345a"],
      "Measure": ["cost001", "cost001", "cost001", "cost001"],
      "Value": [10, 10, 10, 10]
    }
    joined_cols: ["Sales Channel", "Specialism"]
    mapping_dataframe: {
      "Period": ["202201", "202201", "202202", "202202"],
      "Employee": ["00000001", "00000002", "00000001", "00000002"],
      "Sales Channel": ["temp", "perm", "perm", "perm"],
      "Specialism": ["IT", "finance", "engineering", "engineering"],
      "Cost Position Type": ["KAM", "AM", "Team Leader", "Manager"]
    }
    expected_dataframe: {
      "Period": ["202201", "202201", "202202", "202202"],
      "Employee": ["00000001", "00000002", "00000001", "00000002"],
      "Orgunit": ["abc123a", "abc123a", "def345a", "def345a"],
      "Measure": ["cost001", "cost001", "cost001", "cost001"],
      "Value": [10, 10, 10, 10],
      "Sales Channel": ["temp", "perm", "perm", "perm"],
      "Specialism": ["IT", "finance", "engineering", "engineering"]
    }

test_dataframe_execute_mappings_replace_success:
  -
    mapping_steps: [
      {
        "method": "replace",
        "mapping": {"replace_dim": {"replace_source": "replace_target"}}
      }
    ]

test_dataframe_execute_mappings_map_and_replace_shared_df_with_filter_and_relabel_success:
  -
    mapping_steps: [
      {
        "method": "map_and_replace",
        # since this is a test for shared mapping only, no step-specific mapping df is specified
        "mapping_filter": { "filter_dim": "filter_map_and_replace" },
        "mapping_dimensions": { "map_and_replace_dim_source": "map_and_replace_dim_target" },
        "relabel_dimensions": True
      }
    ]

test_dataframe_execute_mappings_map_and_join_shared_with_filter_and_drop_success:
  -
    mapping_steps: [
      {
        "method": "map_and_join",
        # since this is a test for shared mapping only, no step-specific mapping df is specified
        "mapping_filter": { "filter_dim": "filter_map_and_join" },
        "joined_columns": ["col_to_join1", "col_to_join2"],
        "dropped_columns": ["col_to_drop1", "col_to_drop2"]

      }
    ]

test_mssql_extract_full_table:
  -
    table_name: "Unit Test Table"
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumn2": [ 'TestString1_2', 'TestString2_2' ],
      "UnitTestFloatColumn1": [ 12.34, 12.34 ],
      "UnitTestIntColumn2": [ 123, 123 ]
    }

test_mssql_extract_table_columns:
  -
    table_name: "Unit Test Table"
    columns: ["UnitTestStringColumn1", "UnitTestFloatColumn1"]
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestFloatColumn1": [ 12.34, 12.34 ],
    }

test_mssql_extract_query:
  -
    query: "SELECT [UnitTestStringColumn1], [UnitTestFloatColumn1] FROM dbo.[Unit Test Table]"
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestFloatColumn1": [ 12.34, 12.34 ],
    }
  -
    query: "SELECT * FROM dbo.[Unit Test Table]"
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumn2": [ 'TestString1_2', 'TestString2_2' ],
      "UnitTestFloatColumn1": [ 12.34, 12.34 ],
      "UnitTestIntColumn2": [ 123, 123 ]
    }

test_mssq_extract_query_with_chunksize:
  -
    query: "SELECT [UnitTestStringColumn1], [UnitTestFloatColumn1] FROM dbo.[Unit Test Table]"
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestFloatColumn1": [ 12.34, 12.34 ],
    }
    chunksize: 1
  -
    query: "SELECT * FROM dbo.[Unit Test Table]"
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumn2": [ 'TestString1_2', 'TestString2_2' ],
      "UnitTestFloatColumn1": [ 12.34, 12.34 ],
      "UnitTestIntColumn2": [ 123, 123 ]
    }
    chunksize: 2

test_sql_normalize_relabel:
  -
    dataframe: {
      "UnitTestStringColumnX": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumnY": [ 'TestString1_2', 'TestString2_2' ]
    }
    column_mapping: {"UnitTestStringColumnX":"UnitTestStringColumn1",
                     "UnitTestStringColumnY":"UnitTestStringColumn2"}
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumn2": [ 'TestString1_2', 'TestString2_2' ],
      "Value": [1.0, 1.0]
    }

test_sql_normalize_valuecol_assign:
  -
    dataframe: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumn2": [ 'TestString1_2', 'TestString2_2' ],
      "UnitTestFloatColumn1": [ 12.34, 12.34 ],
      "UnitTestIntColumn2": [ 123, 123 ]
    }
    valuecol: "UnitTestFloatColumn1"
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumn2": [ 'TestString1_2', 'TestString2_2' ],
      "Value": [ 12.34, 12.34 ],
      "UnitTestIntColumn2": [ 123, 123 ]
    }

test_sql_normalize_keep_and_drop:
  -
    dataframe: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumn2": [ 'TestString1_2', 'TestString2_2' ],
      "UnitTestFloatColumn1": [ 12.34, 12.34 ],
      "UnitTestIntColumn2": [ 123, 123 ]
    }
    keep: ["UnitTestStringColumn1", "UnitTestStringColumn2"]
    drop: True
    expected: {
      "UnitTestStringColumn1": [ 'TestString1_1', 'TestString2_1' ],
      "UnitTestStringColumn2": [ 'TestString1_2', 'TestString2_2' ],
      "Value": [ 1.0, 1.0]
    }

test_mssql_loader_replace:
  -
    dataframe: {
      "VarcharColumn1X": ["WriteString1_1", "WriteString1_2"],
      "VarcharColumn2X": ["WriteString2_1", "WriteString2_2"],
      "FloatColumn1": [12, 56],
      "Test": [9.331, 111.666]
    }
    table_name: "Write Test Table"
    if_exists: "append"

test_dataframe_to_csv:
  -
    data_dataframe: {
      "ID": ["A001", "A002", "A003", "A004", "A005"],
      "Name": ["Product A", "Product B", "Product C", "Product D", "Product E"],
      "Category": ["Electronics", "Furniture", "Electronics", "Clothing", "Furniture"],
      "Quantity": [10, 5, 8, 12, 7],
      "Price": [199.99, 79.99, 149.99, 39.99, 99.99],
      "Date": ["2024-02-01", "2024-02-02", "2024-02-03", "2024-02-04", "2024-02-05"],
    }
    expected_dataframe: {
      "ID": ["A001", "A002", "A003", "A004", "A005"],
      "Name": ["Product A", "Product B", "Product C", "Product D", "Product E"],
      "Category": ["Electronics", "Furniture", "Electronics", "Clothing", "Furniture"],
      "Quantity": [10.0, 5.0, 8.0, 12.0, 7.0],
      "Price": [199.99, 79.99, 149.99, 39.99, 99.99],
      "Date": ["2024-02-01", "2024-02-02", "2024-02-03", "2024-02-04", "2024-02-05"],
    }
  -
    data_dataframe: {
      "ID": ["A001", "A002", "A003", "A004", "A005"],
      "Price": [199.99, nan, 149.99, 39.99, nan],
      "Quantity": [10.0, 5.0, NaN, 12.0, 7.0]
    }
    expected_dataframe: {
      "ID": [ "A001", "A002", "A003", "A004", "A005" ],
      "Price": [ 199.99, 0.0, 149.99, 39.99, 0.0 ],
      "Quantity": [ 10, 5, 0.0, 12, 7 ]
    }

test_dataframe_to_csv_build_dataframe_form_mdx:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"

test_dataframe_to_csv_build_dataframe_form_mdx_with_param_optimisation:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"

test_dataframe_to_csv_build_dataframe_form_mdx_fail:
  -
    data_mdx:
      "SELECT 
           {[Periods].[Periods].[202301],[Periods].[Periods].[202302],[Periods].[Periods].[202303],
           [Periods].[Periods].[202304],[Periods].[Periods].[202305],[Periods].[Periods].[202306],
           [Periods].[Periods].[202307],[Periods].[Periods].[202308],[Periods].[Periods].[202309],
           [Periods].[Periods].[202310],[Periods].[Periods].[202311],[Periods].[Periods].[202312]}  
          ON COLUMNS , 
           {[Groups].[Groups].Members}
           * {[Employees].[Employees].Members} 
          ON ROWS 
        FROM [Cost and FTE by Groups] 
        WHERE 
          (
           [Versions].[Versions].[Base Plan], 
           [Lineitems Cost and FTE by Groups].[Lineitems Cost and FTE by Groups].[FTE],
           [Measures Cost and FTE by Groups].[Measures Cost and FTE by Groups].[Value]
          )"
