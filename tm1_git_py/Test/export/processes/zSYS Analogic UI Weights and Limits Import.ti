#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

nFirstDataCol        = 2;
nLastDataCol         = 43;
nProductCol           = 1;
sActualPeriod        = CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type');
pVersion = pVersion;

nNumberOfCol = nLastDataCol - nFirstDataCol + 1;
pFileLocation = CellGetS('zSYS Maintenance Parameter', 'Import Data Directory Path', 'S Type');
#d:\FileTarget\
#pFileName = '2024_06_10_10_31_29_weight_Minimum___Base_admin.csv';
sFile = pFileLocation | pFileName;


nCurrentPeriod = TimSt(Now(), '\Y\m');

sColumnDelimiter = If ( pColumnDelimiter @= '' , ',' , pColumnDelimiter );
sDecimalSeparator = If ( pDecimalSeparator @= '' , '.' , pDecimalSeparator );
sThousandSeparator = pThousandSeparator;
sQuoteChar = pQuoteChar;
sCharacterSet = pCharacterSet;
nHeaderRow = If ( pHeaderRow @= '' , 1 , Numbr ( pHeaderRow ) );


sColumnDelimiter = ',';
sDecimalSeparator = '.';
sThousandSeparator = '';
sQuoteChar = '"';
sCharacterSet = 'TM1CS_UTF8';

DataSourceType = 'CHARACTERDELIMITED';
DataSourceNameForServer = sFile;
DataSourceNameForClient = sFile;
DatasourceASCIIHeaderRecords = nHeaderRow;
DatasourceASCIIQuoteCharacter = sQuoteChar;
DataSourceASCIIDelimiter = sColumnDelimiter;
SetInputCharacterSet ( sCharacterSet );
nRowIndex = 0;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

nRowIndex = nRowIndex + 1;

if(nRowIndex = 1);
  
  sGroup  =  Expand('%v'| NumberToString(nFirstDataCol + 2) |'%');
  sWeightOrLimit  =  Expand('%v'| NumberToString(nFirstDataCol + 4) |'%');
  
#  LogOutput('INFO', sGroup| sWeightOrLimit);

elseif(nRowIndex = 4);
  
  # set groupname variables - in case of new groups, add it here
  
  sCol1  =  Expand('%v'| NumberToString(nFirstDataCol + 0) |'%');
  sCol2  =  Expand('%v'| NumberToString(nFirstDataCol + 1) |'%');
  sCol3  =  Expand('%v'| NumberToString(nFirstDataCol + 2) |'%');
  sCol4  =  Expand('%v'| NumberToString(nFirstDataCol + 3) |'%');
  sCol5  =  Expand('%v'| NumberToString(nFirstDataCol + 4) |'%');
  sCol6  =  Expand('%v'| NumberToString(nFirstDataCol + 5) |'%');
  sCol7  =  Expand('%v'| NumberToString(nFirstDataCol + 6) |'%');
  sCol8  =  Expand('%v'| NumberToString(nFirstDataCol + 7) |'%');
  sCol9  =  Expand('%v'| NumberToString(nFirstDataCol + 8) |'%');
  sCol10 =  Expand('%v'| NumberToString(nFirstDataCol + 9) |'%');
  sCol11 =  Expand('%v'| NumberToString(nFirstDataCol + 10) |'%');
  sCol12 =  Expand('%v'| NumberToString(nFirstDataCol + 11) |'%');
  sCol13 =  Expand('%v'| NumberToString(nFirstDataCol + 12) |'%');
  sCol14 =  Expand('%v'| NumberToString(nFirstDataCol + 13) |'%');
  sCol15 =  Expand('%v'| NumberToString(nFirstDataCol + 14) |'%');
  sCol16 =  Expand('%v'| NumberToString(nFirstDataCol + 15) |'%');
  sCol17 =  Expand('%v'| NumberToString(nFirstDataCol + 16) |'%');
  sCol18 =  Expand('%v'| NumberToString(nFirstDataCol + 17) |'%');
  sCol19 =  Expand('%v'| NumberToString(nFirstDataCol + 18) |'%');
  sCol20 =  Expand('%v'| NumberToString(nFirstDataCol + 19) |'%');
  sCol21 =  Expand('%v'| NumberToString(nFirstDataCol + 20) |'%');
  sCol22 =  Expand('%v'| NumberToString(nFirstDataCol + 21) |'%');
  sCol23 =  Expand('%v'| NumberToString(nFirstDataCol + 22) |'%');
  sCol24 =  Expand('%v'| NumberToString(nFirstDataCol + 23) |'%');
  sCol25 =  Expand('%v'| NumberToString(nFirstDataCol + 24) |'%');
  sCol26 =  Expand('%v'| NumberToString(nFirstDataCol + 25) |'%');
  sCol27 =  Expand('%v'| NumberToString(nFirstDataCol + 26) |'%');
  sCol28 =  Expand('%v'| NumberToString(nFirstDataCol + 27) |'%');
  sCol29 =  Expand('%v'| NumberToString(nFirstDataCol + 28) |'%');
  sCol30 =  Expand('%v'| NumberToString(nFirstDataCol + 29) |'%');
  sCol31 =  Expand('%v'| NumberToString(nFirstDataCol + 30) |'%');
  sCol32 =  Expand('%v'| NumberToString(nFirstDataCol + 31) |'%');
  sCol33 =  Expand('%v'| NumberToString(nFirstDataCol + 32) |'%');
  sCol34 =  Expand('%v'| NumberToString(nFirstDataCol + 33) |'%');
  sCol35 =  Expand('%v'| NumberToString(nFirstDataCol + 34) |'%');
  sCol36 =  Expand('%v'| NumberToString(nFirstDataCol + 35) |'%');
  sCol37 =  Expand('%v'| NumberToString(nFirstDataCol + 36) |'%');
  sCol38 =  Expand('%v'| NumberToString(nFirstDataCol + 37) |'%');
  sCol39 =  Expand('%v'| NumberToString(nFirstDataCol + 38) |'%');
  sCol40 =  Expand('%v'| NumberToString(nFirstDataCol + 39) |'%');
  sCol41 =  Expand('%v'| NumberToString(nFirstDataCol + 40) |'%');
  sCol42 =  Expand('%v'| NumberToString(nFirstDataCol + 41) |'%');
  
  
else;
  sProduct = Expand('%v'| NumberToString(nProductCol) |'%');
  nColumn = nFirstDataCol;
  sCurrentYear = '0';
  
  while(nColumn <= nLastDataCol);
    sCurrentDate = Expand('%sCol'| NumberToString(nColumn - nFirstDataCol + 1) |'%');
    nCurrentDate = StringToNumberEx(sCurrentDate, sDecimalSeparator, sThousandSeparator);
    sCurrentDate = numbertostring(nCurrentDate);
 #Botond 06.16   
    if(Long(sCurrentDate) = 4);
        sCurrentYear = sCurrentDate;
        
        sCurrentValue = Expand('%v'| NumberToString(nColumn) |'%');
        nCurrentValue = StringToNumberEx(sCurrentValue, pDecimalSeparator, pThousandSeparator);
        nCurrentValue = RoundP(nCurrentValue,2);
        
        nInputValueHavi = nCurrentValue\12;
        i=1;
        WHILE( i<=12);
          sActualInputPeriod = sCurrentDate | numberToString(i);
          IF( i<10);
            sActualInputPeriod = sCurrentDate | '0' | numberToString(i);
          ENDIF;
          
          IF (DimIx('Period', sActualInputPeriod) >= DimIx('Period', sActualPeriod));
            CellPutN(nCurrentValue, 'Weight and Limit', pVersion,  sActualInputPeriod, sGroup, sProduct, sWeightOrLimit, 'Value');
          ENDIF;
          
          i=i+1;
          
        END;

    else;
      sCurrentDate = sCurrentYear | Fill('0', 2-Long(sCurrentDate)) | sCurrentDate;

      
      if(DimIx('Period', sCurrentDate) >= DimIx('Period', sActualPeriod));
      
        sCurrentValue = Expand('%v'| NumberToString(nColumn) |'%');
        nCurrentValue = StringToNumberEx(sCurrentValue, pDecimalSeparator, pThousandSeparator);
        nCurrentValue = RoundP(nCurrentValue,2);

            CellPutN(nCurrentValue, 'Weight and Limit', pVersion, sCurrentDate, sGroup, sProduct, sWeightOrLimit, 'Value');
            
          
        endif;
    endif;
    nColumn = nColumn + 1;
  end;
endif;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

# Módos Dávid 2024 02 13

sToday = Today(1);
CellPutS(sToday, '}ElementAttributes_Version', pVersion, 'Last Updated');
CellPutS(pUser, '}ElementAttributes_Version', pVersion, 'Last Updated By');




#endregion
