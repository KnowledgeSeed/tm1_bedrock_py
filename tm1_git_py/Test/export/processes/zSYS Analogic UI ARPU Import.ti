#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# Módos Dávid


sDimensionName_Period = 'Period';
sDimensionName_Version = 'Version';

#sFileName = '2024_01_25_09_30_45_services_ARPU_KTV_Alaptermek_admin.csv';
#pFileName = sFileName;


sColumnDelimiter = ',';
sDecimalSeparator = '.';
sThousandSeparator = '';
sQuoteChar = '"';
sCharacterSet = 'TM1CS_UTF8';

# megadja hol van az elsp adat
nHeaderRow = 0;
nFirstDataCol= 2;
nLastDataCol= 43;
pVersion = pVersion;
nHeaderRowIndex = 1;
i = 1;

# ARPU process patemeterek
sMode = 1;
pVersion = pVersion;
# Product midnig adott
# pValue mindig adott
# pPeriod mindig adott


# 20240
sActualPeriod = CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type');

# define and set CSV as data source
pFileLocation = CellGetS('zSYS Maintenance Parameter', 'Import Data Directory Path', 'S Type');
sFile = pFileLocation | pFileName;

DataSourceType = 'CHARACTERDELIMITED';
DataSourceNameForServer = sFile;
DataSourceNameForClient = sFile;
DatasourceASCIIHeaderRecords = nHeaderRow;
DatasourceASCIIQuoteCharacter = sQuoteChar;
DataSourceASCIIDelimiter = sColumnDelimiter;
SetInputCharacterSet ( sCharacterSet );




#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

IF(i = 1);
  sCategory =  Expand('%v'| NumberToString(nFirstDataCol + 2) |'%');
  i = i + 1;
  itemskip;
  
ENDIF;
IF(i = 2 %  i = 3 % i = 4);
  i = i + 1;
  itemskip;
ENDIF;

nCategoryIndex = i - 4;
sProduct = HierarchySubsetGetElementName('Product', 'Product', sCategory, nCategoryIndex);

  sCol1  =  Expand('%v'| NumberToString(nFirstDataCol + 0) |'%');
  sCol2  =  Expand('%v'| NumberToString(nFirstDataCol + 1) |'%');
  sCol3  =  Expand('%v'| NumberToString(nFirstDataCol + 2) |'%');
  sCol4  =  Expand('%v'| NumberToString(nFirstDataCol + 3) |'%');
  sCol5  =  Expand('%v'| NumberToString(nFirstDataCol + 4) |'%');
  sCol6  =  Expand('%v'| NumberToString(nFirstDataCol + 5) |'%');
  sCol7  =  Expand('%v'| NumberToString(nFirstDataCol + 6) |'%');
  sCol8  =  Expand('%v'| NumberToString(nFirstDataCol + 7) |'%');
  sCol9  =  Expand('%v'| NumberToString(nFirstDataCol + 8) |'%');
  sCol10 =  Expand('%v'| NumberToString(nFirstDataCol + 9) |'%');
  sCol11 =  Expand('%v'| NumberToString(nFirstDataCol + 10) |'%');
  sCol12 =  Expand('%v'| NumberToString(nFirstDataCol + 11) |'%');
  sCol13 =  Expand('%v'| NumberToString(nFirstDataCol + 12) |'%');
  sCol14 =  Expand('%v'| NumberToString(nFirstDataCol + 13) |'%');
  sCol15 =  Expand('%v'| NumberToString(nFirstDataCol + 14) |'%');
  sCol16 =  Expand('%v'| NumberToString(nFirstDataCol + 15) |'%');
  sCol17 =  Expand('%v'| NumberToString(nFirstDataCol + 16) |'%');
  sCol18 =  Expand('%v'| NumberToString(nFirstDataCol + 17) |'%');
  sCol19 =  Expand('%v'| NumberToString(nFirstDataCol + 18) |'%');
  sCol20 =  Expand('%v'| NumberToString(nFirstDataCol + 19) |'%');
  sCol21 =  Expand('%v'| NumberToString(nFirstDataCol + 20) |'%');
  sCol22 =  Expand('%v'| NumberToString(nFirstDataCol + 21) |'%');
  sCol23 =  Expand('%v'| NumberToString(nFirstDataCol + 22) |'%');
  sCol24 =  Expand('%v'| NumberToString(nFirstDataCol + 23) |'%');
  sCol25 =  Expand('%v'| NumberToString(nFirstDataCol + 24) |'%');
  sCol26 =  Expand('%v'| NumberToString(nFirstDataCol + 25) |'%');
  sCol27 =  Expand('%v'| NumberToString(nFirstDataCol + 26) |'%');
  sCol28 =  Expand('%v'| NumberToString(nFirstDataCol + 27) |'%');
  sCol29 =  Expand('%v'| NumberToString(nFirstDataCol + 28) |'%');
  sCol30 =  Expand('%v'| NumberToString(nFirstDataCol + 29) |'%');
  sCol31 =  Expand('%v'| NumberToString(nFirstDataCol + 30) |'%');
  sCol32 =  Expand('%v'| NumberToString(nFirstDataCol + 31) |'%');
  sCol33 =  Expand('%v'| NumberToString(nFirstDataCol + 32) |'%');
  sCol34 =  Expand('%v'| NumberToString(nFirstDataCol + 33) |'%');
  sCol35 =  Expand('%v'| NumberToString(nFirstDataCol + 34) |'%');
  sCol36 =  Expand('%v'| NumberToString(nFirstDataCol + 35) |'%');
  sCol37 =  Expand('%v'| NumberToString(nFirstDataCol + 36) |'%');
  sCol38 =  Expand('%v'| NumberToString(nFirstDataCol + 37) |'%');
  sCol39 =  Expand('%v'| NumberToString(nFirstDataCol + 38) |'%');
  sCol40 =  Expand('%v'| NumberToString(nFirstDataCol + 39) |'%');
  sCol41 =  Expand('%v'| NumberToString(nFirstDataCol + 40) |'%');
  sCol42 =  Expand('%v'| NumberToString(nFirstDataCol + 41) |'%');


# 1-től 43-ig
# ki kell hagyni 1,2,15,28
# 41 42 43 pedig éves

nColIndex = 1;

WHILE( nColIndex <= nlastdatacol);
  # kivételek
  IF( nColIndex = 1 %  nColIndex = 2 % nColIndex = 15 % nColIndex = 28 %  nColIndex = 41 %  nColIndex = 42 % nColIndex = 43);
      IF( nColIndex = 41);
        nInputPeriod = StringToNumber(DELET(sActualPeriod,5,2));
        nInputPeriod = nInputPeriod + 2;
        sInputPeriod = NumberToString(nInputPeriod);
        
        sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
        nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
        nCurrentValue = RoundP(nCurrentValue,1);
        sCurrentValue = NumberToString(nCurrentValue);
        ExecuteProcess('zSYS Analogic UI ARPU Input',
           'pMode', sMode,
           'pProduct', sProduct,
           'pValue', sCurrentValue,
           'pVersion', pVersion,
           'pPeriod', sInputPeriod,
           'pUser', pUser
          );
      ENDIF;
      IF( nColIndex = 42);
        nInputPeriod = StringToNumber(DELET(sActualPeriod,5,2));
        nInputPeriod = nInputPeriod + 3;
        sInputPeriod = NumberToString(nInputPeriod);
        
        sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
        nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
        nCurrentValue = RoundP(nCurrentValue,1);
        sCurrentValue = NumberToString(nCurrentValue);
        ExecuteProcess('zSYS Analogic UI ARPU Input',
           'pMode', sMode,
           'pProduct', sProduct,
           'pValue', sCurrentValue,
           'pVersion', pVersion,
           'pPeriod', sInputPeriod,
           'pUser', pUser
          );
      ENDIF;
      IF( nColIndex = 43);
        nInputPeriod = StringToNumber(DELET(sActualPeriod,5,2));
        nInputPeriod = nInputPeriod + 4;
        sInputPeriod = NumberToString(nInputPeriod);
        
        sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
        nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
        nCurrentValue = RoundP(nCurrentValue,1);
        sCurrentValue = NumberToString(nCurrentValue);
        
        ExecuteProcess('zSYS Analogic UI ARPU Input',
           'pMode', sMode,
           'pProduct', sProduct,
           'pValue', sCurrentValue,
           'pVersion', pVersion,
           'pPeriod', sInputPeriod,
           'pUser', pUser
          );
      ENDIF;
  ENDIF;
  IF( nColIndex > 2 & nColIndex <15);
    # only fact
  ENDIF;
    IF( nColIndex > 15 & nColIndex < 28);
          nPeriodIndex = nColIndex - 1;
          sExcelPeriodSubset = 'ActualPeriod';
          sInputPeriod = HierarchySubsetGetElementName(sDimensionName_Period, sDimensionName_Period, sExcelPeriodSubset, nPeriodIndex);
          
          # csak ha benne van az input PEriod-ban
          sPeriodSubsetName = 'Planning Period';
          IF ( SubsetElementExists('Period', sPeriodSubsetName, sInputPeriod) = 1); 
            
        sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
        nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
        nCurrentValue = RoundP(nCurrentValue,1);
        sCurrentValue = NumberToString(nCurrentValue);
        
            ExecuteProcess('zSYS Analogic UI ARPU Input',
           'pMode', sMode,
           'pProduct', sProduct,
           'pValue', sCurrentValue,
           'pVersion', pVersion,
           'pPeriod', sInputPeriod,
           'pUser', pUser
          );
          ENDIF;
  ENDIF;
    IF( nColIndex > 28 & nColIndex < 41);
          nPeriodIndex = nColIndex - 1;
          sExcelPeriodSubset = 'ActualPeriod';
          sInputPeriod = HierarchySubsetGetElementName(sDimensionName_Period, sDimensionName_Period, sExcelPeriodSubset, nPeriodIndex);
          
        sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
        nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
        nCurrentValue = RoundP(nCurrentValue,1);
        sCurrentValue = NumberToString(nCurrentValue);
          
            ExecuteProcess('zSYS Analogic UI ARPU Input',
           'pMode', sMode,
           'pProduct', sProduct,
           'pValue', sCurrentValue,
           'pVersion', pVersion,
           'pPeriod', sInputPeriod,
           'pUser', pUser
          );

  ENDIF;
  
  
  nColIndex = nColIndex + 1;
END;


  
i = i+1;

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
