#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2023.04.05
# Originator                         Ullmann Dávid
# Purpose                            Process to build period subset from start year
# Change Date                           
# Change Request Reference    
# Change Made by                     
# =========================================================

#Botond 2024.08.10
#pStartYear dinamizálása

sActualYear = Subst(CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type'), 1, 4);
nActualYear = StringToNumber(sActualYear);
pStartYear = NumberToString(nActualYear - 1);

# declaring period dim variables

sDimensionName_Period = 'Period';
sHierarchyName_Period = 'Period';

# declaring name of the created, modified subset

sSubsetName_Period    = 'Actual Period';

# ennyi évet rak bele összesen
nMaxIndex_Years = 6;

# ennyi évet fog kifejteni hónapokkal
nMaxIndex_Defined = 3;

# (maxindex years - maxindex month) mennyiségű évet fog magában belerakni

# input validation

if(ElementType(sDimensionName_Period, sHierarchyName_Period, pStartYear) @<> 'C');
#  LogOutput('ERROR', 'Start period is not valid or not a C type element, terminating process...');
  ProcessQuit;
endif;

nEndYear = NumberToString(StringToNumber(pStartYear) + nMaxIndex_Years - 1);
if(DimensionElementExists(sDimensionName_Period, nEndYear) = 0);
#  LogOutput('ERROR', 'End period is out of bounds, terminating process...');
  ProcessQuit;
endif;

# végső subset létrehozás, tisztítás
if(HierarchySubsetExists(sDimensionName_Period, sHierarchyName_Period, sSubsetName_Period) = 0);
  HierarchySubsetCreate(sDimensionName_Period, sHierarchyName_Period, sSubsetName_Period, 0);
endif;
HierarchySubsetDeleteAllElements(sDimensionName_Period, sHierarchyName_Period, sSubsetName_Period);

# ideiglenes subset az éveknek
sMDX_years = '{TM1FILTERBYLEVEL({[Period].[Period].Members}, 1) }';
sTempSubset_years = 'Level1 Temp';
SubsetCreate(sDimensionName_Period, sTempSubset_years, 1);
SubsetMDXSet(sDimensionName_Period, sTempSubset_years, sMDX_years);
SubsetMDXSet(sDimensionName_Period, sTempSubset_years, '');

# ideiglenes subset a hónapoknak, minden évhez külön átállítjuk a tartalmát
sTempSubset_months = 'Level0 Temp';
SubsetCreate(sDimensionName_Period, sTempSubset_months, 1);

# a külső loop rakja bele az éveket a subsetbe
nIndex = 0;
nStartIndex = SubsetElementGetIndex(sDimensionName_Period, sTempSubset_years, pStartYear, 1);
while(nIndex < nMaxIndex_Years);
  sCurrentYear = SubsetGetElementName(sDimensionName_Period, sTempSubset_years, nIndex + nStartIndex);
  nCurrentIndex = SubsetGetSize(sDimensionName_Period, sSubsetName_Period) + 1;
  SubsetElementInsert(sDimensionName_Period, sSubsetName_Period, sCurrentYear, nCurrentIndex);
  
  # amennyiben kifejtős éveknél vagyunk, a belső loop szúrja be az év után a 12 gyerekét, a hónapokat
  if(nIndex < nMaxIndex_Defined);
    sMDX_months = '{Descendants([Period].[Period].['|sCurrentYear|'], 1)}';
    SubsetMDXSet(sDimensionName_Period, sTempSubset_months, sMDX_months);
    SubsetMDXSet(sDimensionName_Period, sTempSubset_months, '');
    
    nIndexInner = 1;
    while(nIndexInner <= 12);
      sCurrentMonth = SubsetGetElementName(sDimensionName_Period, sTempSubset_months, nIndexInner);
      nCurrentIndex = SubsetGetSize(sDimensionName_Period, sSubsetName_Period) + 1;
      SubsetElementInsert(sDimensionName_Period, sSubsetName_Period, sCurrentMonth, nCurrentIndex);
      
      nIndexInner = nIndexInner + 1;
    end;
  endif;
  nIndex = nIndex + 1;
end;


#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
