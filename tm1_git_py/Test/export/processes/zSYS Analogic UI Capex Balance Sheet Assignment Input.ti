#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****
sActualPeriod = CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type');
sMeasure = 'Assignment';
sPeriodDim = 'Period';
sAllNTimeSubset = 'Actual Period N level';
nInputValue = 1;
nFirstPeriodIndex = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, pPeriod);
nLastPeriodIndex = SubsetGetSize(sPeriodDim, sAllNTimeSubset);


sYear = attrs(sPeriodDim, pPeriod, 'year');
nCurrentYear = stringToNumber(DELET(sActualPeriod,5,2));
sCurrentYear = numberToString(nCurrentYear);
          
i = nFirstPeriodIndex;
WHILE(i <= nLastPeriodIndex);
      sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);
      CellPutN(nInputValue, 'Capex Balance Sheet Assignment', pVersion, sInputPeriod, pCapexLedger, pBalanceSheetLedger, sMeasure);
      CellPutS(pBalanceSheetLedger, 'Capex Balance Sheet Assignment', pVersion, sInputPeriod, pCapexLedger, 'Nem tartozik Merleghez', 'BalanceSheetName');
      CellPutS(pCapexLedger, 'Capex Balance Sheet Assignment', pVersion, sInputPeriod, 'Nem tartozik Capexhez', pBalanceSheetLedger, 'CapexName');
      
      sYear = attrs(sPeriodDim, sInputPeriod, 'year');
      ElementAttrPutS('1' , 'Balance Sheet Planning Ledger' , 'Balance Sheet Planning Ledger', pBalanceSheetLedger, 'Capex tetel');
        IF(sYear @= sCurrentYear);
          ElementAttrPutS(pBalanceSheetLedger, 'Capex Ledger' , 'Capex Ledger', pCapexLedger, '202410 ledger');
        ENDIF;
      i = i+1;
END;

BalanceSheetDimName = 'Balance Sheet Planning Ledger';
BalanceSheetHierName = 'Balance Sheet Planning Ledger';

pLedgerDimensionName = 'Balance Sheet Planning Ledger';
sSubsetName_BalanceSheetPlanningAllN = 'BalanceSheetPlanningAllN';
sMDXBalanceSheetPlanning = '
{
TM1FILTERBYLEVEL({
	TM1DRILLDOWNMEMBER({
		[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Eszkozok],
		[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Forrasok]
	}, ALL, RECURSIVE)}, 0)
}
';
HierarchySubsetCreate(pLedgerDimensionName, pLedgerDimensionName, sSubsetName_BalanceSheetPlanningAllN, 1);
HierarchySubsetMDXSet(pLedgerDimensionName, pLedgerDimensionName, sSubsetName_BalanceSheetPlanningAllN, sMDXBalanceSheetPlanning);

nBalanceSheetLedgerSize = SubsetGetSize(BalanceSheetDimName, sSubsetName_BalanceSheetPlanningAllN);

# 1. Ha az adott Capex-es tétel egy másik Mérleggel volt összerendelve az adott időszakon akkor nullázza

j = 1;

WHILE(j <= nBalanceSheetLedgerSize);
  sBalanceSheetLedgerName = SubsetGetElementName(BalanceSheetDimName, sSubsetName_BalanceSheetPlanningAllN, j);
  i = nFirstPeriodIndex;
  WHILE(i <= nLastPeriodIndex);
    sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);   
    nCapexFlag = CellGetN('Capex Balance Sheet Assignment', pVersion, sInputPeriod, pCapexLedger, sBalanceSheetLedgerName, sMeasure);
    IF(nCapexFlag = 1 & sBalanceSheetLedgerName @<>  pBalanceSheetLedger);
      CellPutN(0, 'Capex Balance Sheet Assignment', pVersion, sInputPeriod, pCapexLedger, sBalanceSheetLedgerName, sMeasure);
      CellPutS('', 'Capex Balance Sheet Assignment', pVersion, sInputPeriod, 'Nem tartozik Capexhez', sBalanceSheetLedgerName, 'CapexName');
      ElementAttrPutS('0' , 'Balance Sheet Planning Ledger' , 'Balance Sheet Planning Ledger', sBalanceSheetLedgerName, 'Capex tetel');
    ENDIF;
        i = i+1;
    END;
  j = j+1;
END;

#################################################################################################################################################
#################################################################################################################################################

#CapexDimName = 'Capex Ledger';
#pCapexLedgerDimensionName = 'Capex Ledger';
#sSubsetName_CapexAllN = 'CapexAllN';
#sMDXCapex = '
#{
#	TM1FILTERBYLEVEL({
#		[Capex Ledger].[Capex Ledger].Members
#	}, 0)
#}
#';
#HierarchySubsetCreate(pCapexLedgerDimensionName, pCapexLedgerDimensionName, sSubsetName_CapexAllN, 1);
#HierarchySubsetMDXSet(pCapexLedgerDimensionName, pCapexLedgerDimensionName, sSubsetName_CapexAllN, sMDXCapex);
#
#nCapexLedgerSize = SubsetGetSize(CapexDimName, sSubsetName_CapexAllN);
#
## 1. Ha az adott Mérleg egy másik Capex-es tétellel volt összerendelve az adott időszakon akkor nullázza
#j = 1;
#
#WHILE(j <= nCapexLedgerSize);
#  sCapexLedgerName = SubsetGetElementName(CapexDimName, sSubsetName_CapexAllN, j);
#  i = nFirstPeriodIndex;
#  WHILE(i <= nLastPeriodIndex);
#    sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);   
#    nBalanceSheetFlag = CellGetN('Capex Balance Sheet Assignment', pVersion, sInputPeriod, sCapexLedgerName, pBalanceSheetLedger, sMeasure);
#    IF(nBalanceSheetFlag = 1 & sCapexLedgerName @<>  pCapexLedger);
#      CellPutN(0, 'Capex Balance Sheet Assignment', pVersion, sInputPeriod, sCapexLedgerName, pBalanceSheetLedger, sMeasure);
#      CellPutS('', 'Capex Balance Sheet Assignment', pVersion, sInputPeriod, sCapexLedgerName, 'Nem tartozik Merleghez', 'BalanceSheetName');
#      ElementAttrPutS('', 'Capex Ledger' , 'Capex Ledger', sCapexLedgerName, 'Actual merleg');
#    ENDIF;
#        i = i+1;
#    END;
#  j = j+1;
#END;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

sToday = Today(1);
CellPutS(sToday, '}ElementAttributes_Version', pVersion, 'Last Updated');
CellPutS(pUser, '}ElementAttributes_Version', pVersion, 'Last Updated By');
#endregion
