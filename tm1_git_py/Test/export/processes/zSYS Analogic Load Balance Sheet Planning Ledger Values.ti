#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# 1, Közvetlen költség alatti N-es elemek
# 2, Amilnél az attri editable=1

pLedgerDimensionName = 'Balance Sheet Planning Ledger';
sSubsetName_BalanceSheetPlanningETL = 'BalanceSheetPlanningETL';
sMDX = '
{
TM1FILTERBYLEVEL({
	TM1DRILLDOWNMEMBER({
		[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Eszkozok],
		[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Forrasok]
	}, ALL, RECURSIVE)}, 0)
}
';

HierarchySubsetCreate(pLedgerDimensionName, pLedgerDimensionName, sSubsetName_BalanceSheetPlanningETL, 1);
HierarchySubsetMDXSet(pLedgerDimensionName, pLedgerDimensionName, sSubsetName_BalanceSheetPlanningETL, sMDX);

# Mody 10.14.
# last year mindent ki kell nullázni utána felül lehet írni
# all periodnál minden törlése az adott kockában


pLedgerDimensionName = 'Balance Sheet Planning Ledger';
sBalanceSheetPlanningAllN = 'BalanceSheetPlanningAllNElement';

# subsetet atirni
sMDXBalanceSheetPlanningElement = '
{
TM1FILTERBYLEVEL({
	TM1DRILLDOWNMEMBER({
		[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Eszkozok],
		[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Forrasok]
	}, ALL, RECURSIVE)}, 0)
}
';
#
	
HierarchySubsetCreate(pLedgerDimensionName, pLedgerDimensionName, sBalanceSheetPlanningAllN, 1);
HierarchySubsetMDXSet(pLedgerDimensionName, pLedgerDimensionName, sBalanceSheetPlanningAllN, sMDXBalanceSheetPlanningElement);
nStartLedger = 1;
nMaxledgerLen = SubsetGetSize(pLedgerDimensionName, sBalanceSheetPlanningAllN);
j = nStartLedger;

#Botond 11.20
While( j <= nMaxledgerLen);
  sInputLedger = SubsetGetElementName(pLedgerDimensionName, sBalanceSheetPlanningAllN, j);
  
    IF( pLastYear = 1);
      
      sPeriodSubset = 'Last_Actual_Year';
      sPeriodDim = 'Period';
      nStartPeriod = 1;
      nMaxPeriodLen = SubsetGetSize(sPeriodDim, sPeriodSubset);
      i = nStartPeriod;
      
      WHILE(i <= nMaxPeriodLen);
        
        sInputPeriod = SubsetGetElementName(sPeriodDim, sPeriodSubset, i);
       # kockat atirni
        CellPutN(0, 'Balance Sheet Planning', pVersion, sInputPeriod, sInputLedger, 'Value');
        i = i+1;
        
      END;
      
    ENDIF;
    
    IF( pAllPeriod = 1);
      
      sPeriodSubset = 'All N';
      sPlanningPeriodSubset = 'Planning Period';
      sPeriodDim = 'Period';
      nStartPeriod = 1;
      nMaxPeriodLen = SubsetGetSize(sPeriodDim, sPeriodSubset);
      i = nStartPeriod;
      
      WHILE(i <= nMaxPeriodLen);
        
        sInputPeriod = SubsetGetElementName(sPeriodDim, sPeriodSubset, i);
        
        IF(SubsetElementExists('Period', sPlanningPeriodSubset, sInputPeriod) = 0);
          # kockat atirni
          CellPutN(0, 'Balance Sheet Planning', pVersion, sInputPeriod, sInputLedger, 'Value');
        ENDIF;
        
        i = i+1;
        
      END;
    ENDIF;
  
j = j+ 1;
#END ledger while
END;













#endregion
#region Metadata
##****Begin: Generated Statements***
##****End: Generated Statements****

# ez a két főkönyv itt úgysem kell
IF( vSzmla @= 'Egyéb költségek' );
    itemskip;
ENDIF;
IF( vSzmla @= 'Szociális hozzájárulás - Szem jell. járulékok, adók' );
    itemskip;
ENDIF;

#
IF( LONG(vSzmla) = 5);
  sLedgerFilter = DELET(vSzmla, 2, 4);
  IF( sLedgerFilter @= '5');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '6');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '7');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '8');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '9');
    itemskip;
  ENDIF;
ENDIF;

IF( LONG(vSzmla) = 6);
  sLedgerFilterIFRS = DELET(vSzmla, 3, 4);
  IF( sLedgerFilterIFRS @= '05');
    itemskip;
  ENDIF;
  IF( sLedgerFilterIFRS @= '06');
    itemskip;
  ENDIF;
  IF( sLedgerFilterIFRS @= '07');
    itemskip;
  ENDIF;
  IF( sLedgerFilterIFRS @= '08');
    itemskip;
  ENDIF;
  IF( sLedgerFilterIFRS @= '09');
    itemskip;
  ENDIF;
ENDIF;

# tevhnikai főkönyv nem kell
IF( vSzmla @= '491' );
    itemskip;
ENDIF;
IF( vSzmla @= '0491' );
    itemskip;
ENDIF;

IF( vSzmla @= '86607' );
    itemskip;
ENDIF;

IF( vSzmla @= '086607' );
    itemskip;
ENDIF;

sLedgerDim = 'Balance Sheet Planning Ledger';

IF ( DimensionElementExists(sLedgerDim , vSzmla) = 0);
  
    sElementNameParent = vFőknyvalcsoport;
    DimensionElementComponentAddDirect(sLedgerDim, sElementNameParent, vSzmla, 1);
    
    CellPutS('automatikusan kerult be', '}ElementAttributes_Balance Sheet Planning Ledger', vSzmla, 'megjegyzes');
    CellPutS(vSzmla, '}ElementAttributes_Balance Sheet Planning Ledger', vSzmla, 'Caption');
    CellPutS('1', '}ElementAttributes_Balance Sheet Planning Ledger', vSzmla, 'editable');
    CellPutS('', '}ElementAttributes_Balance Sheet Planning Ledger', vSzmla, 'Expand');
    CellPutS('5', '}ElementAttributes_Balance Sheet Planning Ledger', vSzmla, 'UI Level');
    CellPutS('input', '}ElementAttributes_Balance Sheet Planning Ledger', vSzmla, 'Calculations And Logic');
    CellPutS('input', '}ElementAttributes_Balance Sheet Planning Ledger', vSzmla, 'Efi szam kalkulacio');
  
ENDIF;

#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
#Botond 04.03

# vDtum
# vSzmla
# vEgyenleg

# 1 2 3 4 eredménykimutatáshoz nem kell csak a mérleghez

# ez a két főkönyv itt úgysem kell
IF( vSzmla @= 'Egyéb költségek' );
    itemskip;
ENDIF;
IF( vSzmla @= 'Szociális hozzájárulás - Szem jell. járulékok, adók' );
    itemskip;
ENDIF;


IF( LONG(vSzmla) = 5);
  sLedgerFilter = DELET(vSzmla, 2, 4);
  IF( sLedgerFilter @= '5');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '6');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '7');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '8');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '9');
    itemskip;
  ENDIF;
ENDIF;

IF( LONG(vSzmla) = 6);
  sLedgerFilterIFRS = DELET(vSzmla, 3, 4);
  IF( sLedgerFilter @= '05');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '06');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '07');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '08');
    itemskip;
  ENDIF;
  IF( sLedgerFilter @= '09');
    itemskip;
  ENDIF;
ENDIF;

# tevhnikai főkönyv nem kell
IF( vSzmla @= '491' );
    itemskip;
ENDIF;
IF( vSzmla @= '0491' );
    itemskip;
ENDIF;

IF( vSzmla @= '86607' );
    itemskip;
ENDIF;

IF( vSzmla @= '086607' );
    itemskip;
ENDIF;


nNumberValue = StringToNumber(vEgyenleg);
nNumberSzamla = StringToNumber(vSzmla);

#Botond 10.22
IF ( SubsetElementExists(pLedgerDimensionName, sSubsetName_BalanceSheetPlanningETL, vSzmla) = 0); 
    itemskip;
ENDIF;


IF( pAllPeriod = 1);
  sPeriodSubsetName = 'Planning Period';
  sDate = DELET(vDtum, 5, 1);
  IF ( SubsetElementExists('Period', sPeriodSubsetName, sDate) = 0); 
    CellPutN(nNumberValue, 'Balance Sheet Planning', pVersion, sDate, vSzmla, 'Value');
    
    IF ( (DELET(sDate, 1, 4) @= '01') & (DELET(sDate, 5, 2) @<>'2022') );
      nPrevYearClosing = CellGetN('Balance Sheet Planning', pVersion, sDate, vSzmla, 'opening');
      nDelta = nNumberValue - nPrevYearClosing;
      CellPutN(nDelta, 'Balance Sheet Planning', pVersion, sDate, vSzmla, 'Value');
    ENDIF;

  ENDIF;
  

ENDIF;


IF( pLastYear = 1);
  sPeriodSubsetName = 'Last_Actual_Year';
  sDate = DELET(vDtum, 5, 1);
  IF ( SubsetElementExists('Period', sPeriodSubsetName, sDate) = 1);
    CellPutN(nNumberValue, 'Balance Sheet Planning', pVersion, sDate, vSzmla, 'Value');

    IF (DELET(sDate, 1, 4) @= '01');
      nPrevYearClosing = CellGetN('Balance Sheet Planning', pVersion, sDate, vSzmla, 'opening');
      nDelta = nNumberValue - nPrevYearClosing;
      CellPutN(nDelta, 'Balance Sheet Planning', pVersion, sDate, vSzmla, 'Value');
    ENDIF;

  ENDIF;
  
ENDIF;



#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
