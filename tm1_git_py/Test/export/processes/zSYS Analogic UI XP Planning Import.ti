#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

#pCategory = 'Internet';


nFirstDataCol        =  1;
nLastDataCol         = 43;
nNumberOfCol = nLastDataCol - nFirstDataCol + 1;

pFileLocation = CellGetS('zSYS Maintenance Parameter', 'Import Data Directory Path', 'S Type');
#d:\FileTarget\
#pFileName = '2024_07_29_Mody_test.csv';
sFile = pFileLocation | pFileName;

sActualPeriod        = CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type');
#nCurrentPeriod = TimSt(Now(), '\Y\m');

sColumnDelimiter = ',';
sDecimalSeparator = '.';
sThousandSeparator = '';
sQuoteChar = '"';
sCharacterSet = 'TM1CS_UTF8';
nHeaderRow = 0;
nHeaderRowIndex = 1;

DataSourceType = 'CHARACTERDELIMITED';
DataSourceNameForServer = sFile;
DataSourceNameForClient = sFile;
DatasourceASCIIHeaderRecords = nHeaderRow;
DatasourceASCIIQuoteCharacter = sQuoteChar;
DataSourceASCIIDelimiter = sColumnDelimiter;
SetInputCharacterSet ( sCharacterSet );

nRowIndex = 1;







#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
# Módos Dávid 08 13
# csak az 5-11-ig van olyan sor ahol adatokat kell inportálni
IF( nRowIndex = 5 % nRowIndex = 6 %  nRowIndex = 7 % nRowIndex = 8 %
  nRowIndex = 9 % nRowIndex = 10 % nRowIndex = 11);

  # sCol1 nincs használva
  sCol2  =  Expand('%v'| NumberToString(nFirstDataCol + 1) |'%');
  sCol3  =  Expand('%v'| NumberToString(nFirstDataCol + 2) |'%');
  sCol4  =  Expand('%v'| NumberToString(nFirstDataCol + 3) |'%');
  sCol5  =  Expand('%v'| NumberToString(nFirstDataCol + 4) |'%');
  sCol6  =  Expand('%v'| NumberToString(nFirstDataCol + 5) |'%');
  sCol7  =  Expand('%v'| NumberToString(nFirstDataCol + 6) |'%');
  sCol8  =  Expand('%v'| NumberToString(nFirstDataCol + 7) |'%');
  sCol9  =  Expand('%v'| NumberToString(nFirstDataCol + 8) |'%');
  sCol10 =  Expand('%v'| NumberToString(nFirstDataCol + 9) |'%');
  sCol11 =  Expand('%v'| NumberToString(nFirstDataCol + 10) |'%');
  sCol12 =  Expand('%v'| NumberToString(nFirstDataCol + 11) |'%');
  sCol13 =  Expand('%v'| NumberToString(nFirstDataCol + 12) |'%');
  sCol14 =  Expand('%v'| NumberToString(nFirstDataCol + 13) |'%');
  sCol15 =  Expand('%v'| NumberToString(nFirstDataCol + 14) |'%');
  sCol16 =  Expand('%v'| NumberToString(nFirstDataCol + 15) |'%');
  sCol17 =  Expand('%v'| NumberToString(nFirstDataCol + 16) |'%');
  sCol18 =  Expand('%v'| NumberToString(nFirstDataCol + 17) |'%');
  sCol19 =  Expand('%v'| NumberToString(nFirstDataCol + 18) |'%');
  sCol20 =  Expand('%v'| NumberToString(nFirstDataCol + 19) |'%');
  sCol21 =  Expand('%v'| NumberToString(nFirstDataCol + 20) |'%');
  sCol22 =  Expand('%v'| NumberToString(nFirstDataCol + 21) |'%');
  sCol23 =  Expand('%v'| NumberToString(nFirstDataCol + 22) |'%');
  sCol24 =  Expand('%v'| NumberToString(nFirstDataCol + 23) |'%');
  sCol25 =  Expand('%v'| NumberToString(nFirstDataCol + 24) |'%');
  sCol26 =  Expand('%v'| NumberToString(nFirstDataCol + 25) |'%');
  sCol27 =  Expand('%v'| NumberToString(nFirstDataCol + 26) |'%');
  sCol28 =  Expand('%v'| NumberToString(nFirstDataCol + 27) |'%');
  sCol29 =  Expand('%v'| NumberToString(nFirstDataCol + 28) |'%');
  sCol30 =  Expand('%v'| NumberToString(nFirstDataCol + 29) |'%');
  sCol31 =  Expand('%v'| NumberToString(nFirstDataCol + 30) |'%');
  sCol32 =  Expand('%v'| NumberToString(nFirstDataCol + 31) |'%');
  sCol33 =  Expand('%v'| NumberToString(nFirstDataCol + 32) |'%');
  sCol34 =  Expand('%v'| NumberToString(nFirstDataCol + 33) |'%');
  sCol35 =  Expand('%v'| NumberToString(nFirstDataCol + 34) |'%');
  sCol36 =  Expand('%v'| NumberToString(nFirstDataCol + 35) |'%');
  sCol37 =  Expand('%v'| NumberToString(nFirstDataCol + 36) |'%');
  sCol38 =  Expand('%v'| NumberToString(nFirstDataCol + 37) |'%');
  sCol39 =  Expand('%v'| NumberToString(nFirstDataCol + 38) |'%');
  sCol40 =  Expand('%v'| NumberToString(nFirstDataCol + 39) |'%');
  sCol41 =  Expand('%v'| NumberToString(nFirstDataCol + 40) |'%');
  sCol42 =  Expand('%v'| NumberToString(nFirstDataCol + 41) |'%');
  sCol43 =  Expand('%v'| NumberToString(nFirstDataCol + 42) |'%');
  
  
  
#5. sor TEL + NET + TV
#6. sor NET + TV
#7. sor TV + TEL
#8. sor NET + TEL
#9. sor TV
#10. sor NET
#11, sor TEL
IF( nRowIndex = 5);
  sRowName = 'TEL + NET + TV';
ENDIF;
IF( nRowIndex = 6);
  sRowName = 'NET + TV';
ENDIF;
IF( nRowIndex = 7);
  sRowName = 'TV + TEL';
ENDIF;
IF( nRowIndex = 8);
  sRowName = 'NET + TEL';
ENDIF;
IF( nRowIndex = 9);
  sRowName = 'TV';
ENDIF;
IF( nRowIndex = 10);
  sRowName = 'NET';
ENDIF;
IF( nRowIndex = 11);
  sRowName = 'TEL';
ENDIF;

# 1-15, 28,  nem inputolható
# 16-27 az adott év
# 29-40 havi input
# 41-43 éves input

nColIndex = 16;
WHILE( nColIndex <= nLastDataCol);
# adott év
IF( nColIndex > 15 & nColIndex < 28 );
    nPeriodIndex = nColIndex - 1;
    sExcelPeriodSubset = 'ActualPeriod';
    sInputPeriod = HierarchySubsetGetElementName('Period', 'Period', sExcelPeriodSubset, nPeriodIndex);
    
    sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
    nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
    
    sPeriodSubsetName = 'Planning Period';
    IF ( SubsetElementExists('Period', sPeriodSubsetName, sInputPeriod) = 1);
    ExecuteProcess('zSYS Analogic UI XP Planning Input',
       'pValue', nCurrentValue,
       'pVersion', pVersion,
       'pPeriod', sInputPeriod,
       'pXP', sRowName,
       'pUser', pUser
      );
      ENDIF;
    nColIndex = nColIndex + 1;
ENDIF;
# nem inputolható
IF( nColIndex = 28 );
    nColIndex = nColIndex + 1;
ENDIF;
# Y+1 havi inputok
IF( nColIndex > 28);
    nPeriodIndex = nColIndex - 1;
    sExcelPeriodSubset = 'ActualPeriod';
    sInputPeriod = HierarchySubsetGetElementName('Period', 'Period', sExcelPeriodSubset, nPeriodIndex);
    
    sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
    nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
    ExecuteProcess('zSYS Analogic UI XP Planning Input',
       'pValue', nCurrentValue,
       'pVersion', pVersion,
       'pPeriod', sInputPeriod,
       'pXP', sRowName,
       'pUser', pUser
      );
      nColIndex = nColIndex + 1;
ENDIF;

END;


# sorok skip vége
ENDIF;
nRowIndex = nRowIndex + 1;

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
