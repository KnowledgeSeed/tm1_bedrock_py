#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2015/02/03
# Originator                                 Moravcsik Zsolt
# Purpose                                   General Process to create a cube view, if subset does not exist just create a n-level element MDX
# Change Date                           2015-04-20
# Change Request Reference    Logging
# Change Made by                     
# =========================================================
##### Use this code to execute CubeCreateView process
#####ExecuteProcess('zSYS Cube View Create'  , 'pCubeName', ''  , 'pViewName', ''  , 'pSubname', ''  , 'pSuppressZero', 1  , 'pSuppressConsol', 1  , 'pSuppressRules', 1  , 'pDebug', 0);

# General LOGGING
nRandomNumber = Round ( RAND * 1000000);
sRandomNumber = NumberToString(nRandomNumber);
pStartTime=NumberToString(NOW());
pProcessName =  GetProcessName();
pParams= 'pCubeName|'|pCubeName|'|pViewName|'|pViewName|'|pSubname|'|pSubname;
IF (pLogging = 1);
#ExecuteProcess ('zSYS Process Log Create Entry','pProcessName',pProcessName,'pStartTime',pStartTime,'pParams',pParams,'pRandomNumber',sRandomNumber,'pCallerID',pCallerID);
ENDIF;

# DEFINE VARIABLES
vsSysControl = 'zSYS Maintenance Parameter';
vsDimensionExportUNC = CellGetS(vsSysCOntrol, 'Dimension Export UNC','Stype');
vsProcessDebuggingUNC = CellGetS(vsSysCOntrol,'Process Debugging UNC' ,'Stype');
vsLogDirectoryPath = CellGetS(vsSysCOntrol,'Log Directory Path' ,'Stype');
vsProcessName =  GetProcessName();
vsTimeStamp = TIMST(NOW(),'\Y\m\d\h\i\s');
vsDebugFile = vsProcessDebuggingUNC | vsProcessName | ' ' | vsTimeStamp | '.txt';
vsLogFile = vsLogDirectoryPath | vsProcessName | ' ' | vsTimeStamp | '.txt';

# CreateView by parameters
IF(ViewExists(pCubeName,pViewName) = 0);
   ViewCreate(pCubeName, pViewname);
   IF(pDebug = 1);
     AsciiOutput( vsDebugFile,'View created: '|pViewName);
   ENDIF;
ENDIF;

i = 1;
WHILE (TABDIM (pCubeName,i) @<>''); 
   vsDimName = TABDIM (pCubeName,i);

   # Handle subsets - if subset exists, assign it, if not, create n-level subset with MDX
   IF( SubsetExists(vsDimName, pSubName) = 1);
      ViewSubsetAssign(pCubeName, pViewname, vsDimName, pSubName);
      IF(pDebug = 1);
         AsciiOutput( vsDebugFile,'The already created subset assigned to the view: '|pViewName| ' subset: '|pSubName);
      ENDIF;
   ELSE;
      # Checks if the element of a dimension needs to be excluded or not. It is necessary to exclude Inherit measures from Version copies.
      IF( DIMIX('}ElementAttributes_' | vsDimName, 'ExcludeFromCopy') <> 0 );
             vMDX = '{TM1FILTERBYLEVEL( {FILTER( {TM1SUBSETALL( ['|vsDimName|'] )}, ['|vsDimName|'].[ExcludeFromCopy] = 0)}, 0)}';
      ELSE;
             vMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|vsDimName|'] )}, 0)}';
      ENDIF;
      SubsetCreateByMDX (pSubName , vMDX) ;
      SubsetMDXSet( vsDimName, pSubName, ''); 
      ViewSubsetAssign(pCubeName, pViewName, vsDimName, pSubName);


# Use Alias If possible
      IF( DIMIX('}ElementAttributes_' | vsDimName, 'Code') <> 0);
            SubsetAliasSet( vsDimName, pSubName, 'Code' );
      ELSEIF( DIMIX('}ElementAttributes_' |vsDimName, 'Caption_Default') <> 0);
            SubsetAliasSet( vsDimName, pSubName, 'Caption_Default' );
      ENDIF;

      IF(pDebug = 1);
         AsciiOutput( vsDebugFile,'There are no specific subset so n level dynamic subset assigned to: '|pViewName| ' subset: '|pSubName);
      ENDIF;
   ENDIF;

   ViewTitleDimensionSet(pCubeName,pViewName, vsDimname);
   dimszam =  i;
   i = i +1;
END;

# Set view properties
VIEWEXTRACTSKIPZEROESSET(pCubeName,pViewName,pSuppressZero);
VIEWEXTRACTSKIPRULEVALUESSET(pCubeName,pViewName,pSuppressRules);
VIEWEXTRACTSKIPCALCSSET(pCubeName,pViewName,pSuppressConsol);

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

# Central logging - end
IF (pLogging = 1);
#ExecuteProcess('zSYS Process Log Close Entry','pProcessName',pProcessName,'pStartTime',pStartTime,'pRandomNumber',sRandomNumber,'pProcessErrorLogFile',GetProcessErrorFilename);
ENDIF;
#endregion
