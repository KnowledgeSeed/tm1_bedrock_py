#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2015/02/03
# Originator                                 Moravcsik Zsolt
# Purpose                                   General process to import a dimension from its source CSV
# Change Date                           
# Change Request Reference    
# Change Made by                     
# =========================================================

# Central logging - start
nRandomNumber = Round ( RAND * 1000000);
sRandomNumber = NumberToString(nRandomNumber);
pStartTime=NumberToString(NOW());
vsProcessName =  GetProcessName();
pParams= 'pDimName|' | pDimName | 'pRebuildDimension|' | pRebuildDimension | 'pSourceFile|' | pSourceFile | 'pCompSortType|' | pCompSortType | 'pCompSortSense|' | pCompSortSense | 'pElSortType|' | pElSortType | 'pElSortSense|' | pElSortSense;
#ExecuteProcess ('zSYS Process Log Create Entry', 'pProcessName', vsProcessName, 'pStartTime', pStartTime, 'pParams', pParams, 'pRandomNumber', sRandomNumber, 'pCallerID', pCallerID);
#OwnCallerID
sCallerID = pStartTime |' - '| vsProcessName | '- '| sRandomNumber;


# Attach the source file
If(CubeExists('zSYS Maintenance Parameter')=1);
sSourceFolder = CellGetS ('zSYS Maintenance Parameter', 'Dimension Export UNC', 'S Type');
Else;
  sSourceFolder='';
Endif;
sSourceFile = sSourceFolder | pSourceFile;
DatasourceNameForServer = sSourceFile;
DatasourceNameForClient = sSourceFile;
DatasourceASCIIDelimiter=';';
DatasourceASCIIDecimalSeparator='.';
DatasourceASCIIQuoteCharacter='"';
DataSourceType='CHARACTERDELIMITED';
DatasourceASCIIHeaderRecords = 0;

DimName = pDimName;

# Delete attributes if dimension exists
IF(DimensionExists(DimName) = 1 & Dimensionexists('}ElementAttributes_'|DimName)= 1 );
   Cube = '}ElementAttributes_' | DimName;
   ViewName = '}'  | GetProcessName() | NumberToString ( Round ( RAND * 1000000) );
   IF (CubeExists(cube) =1);
   IF(ViewExists(Cube,ViewName)=1);
      ViewDestroy(Cube,ViewName);
   ENDIF;

   ViewCreate (Cube, ViewName);
   ViewZeroOut (Cube, ViewName);
   ViewDestroy(Cube,ViewName);
    EndIF;
ENDIF;

# Create the dimension if it does not exist
IF(DimensionExists(DimName) = 0 );
   DimensionCreate (DimName);
ENDIF;

# Delete all elements if the the parameter is set to rebuild
IF(pRebuildDimension @= 'yes' );
   DimensionDeleteAllElements(DimName);
ENDIF;

# Unwind all hierarchies
i = 1;
WHILE( i <= DimSiz (DimName) );
   ElName = DimNm (DimName, i);
   nPar = ElParN (DimName, ElName);
   WHILE( nPar > 0 );
      ParElName = ElPar (DimName, ElName, 1);
      DimensionElementComponentDelete (DimName, ParElName, ElName);
      nPar = ElParN (DimName, ElName);
   END;
    i = i + 1;
END;

# Set element sort order
IF(TRIM(pCompSortType) @= '' );
   pCompSortType = 'ByInput';
ENDIF;

IF(TRIM(pCompSortSense) @= '' );
   pCompSortSense = 'Ascending';
ENDIF;

IF(TRIM(pElSortType) @= '' );
   pElSortType = 'ByHierarchy';
ENDIF;

IF(Trim (pElsortSense) @= '' );
   pElsortSense = 'Ascending';
ENDIF;

DimensionSortOrder(DimName, pCompSortType, pCompSortSense,pElSortType , pElSortSense);

# Initialize the counters
MetaDataRowCounter = 1;
DataRowCounter = 1;

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****

# ATTRIBÚTUMOK BESZÚRÁSA
# Ha 10-nél több attribútum kell, akkor az számláló felső határát bővíteni kell

IF(MetaDataRowCounter= 1);
   nCount = 1;
   WHILE( nCount <= 30);
      sCount = NumberToString (nCount);
      Attr = Expand ( '%' | 'vA' | sCount | '%' );
      AttrName = SUBST(Attr, 4, LONG(Attr)-3);
      AttrType =  SUBST(Attr, 2, 1);
      IF(Trim (AttrName) @<> '' & ( AttrType @= 'N' % AttrType @= 'S' % AttrType @= 'A' )  );
         AttrInsert (DimName, '', AttrName, AttrType);
      ENDIF;
      nCount = nCount + 1;
   END;

ELSE;
   # ELEM TÍPUS MEGHATÁROZÁSA
   # Ha az elemtípus nincs kitöltve, akkor 'N' elem lesz

   IF(TRIM(vType) @= '' );
      sType = 'N';
   ELSE;
      sType = TRIM(vType);
   ENDIF;

   # ELEM SÚLY MEGHATÁROZÁSA
   # Ha a súly nincs kitöltve, akkor = 1

   IF(Trim (vWeight) @= '' );
      nWeight = 1;
   ELSE;
      nWeight = StringToNumber (vWeight);
   ENDIF;

   # ELEMEK BESZÚRÁSA

   IF(TRIM( vL1 ) @<> '' );
       sL1 = TRIM(vL1);
      ElName = sL1;
      DimensionElementInsert (DimName, '', ElName, sType);
      ItemSkip;
   ENDIF;

   IF(TRIM( vL2 ) @<> '' );
       sL2 = TRIM(vL2);
      ElName = sL2;
      ParElName = sL1;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL3 ) @<> '' );
      sL3 = TRIM(vL3);
      ElName = sL3;
      ParElName = sL2;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL4 ) @<> '' );
       sL4 = TRIM(vL4);
      ElName = sL4;
      ParElName = sL3;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL5 ) @<> '' );
      sL5 = TRIM(vL5);
      ElName = sL5;
      ParElName = sL4;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL6 ) @<> '' );
      sL6 = Trim (vL6);
      ElName = sL6;
      ParElName = sL5;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL7 ) @<> '' );
      sL7 = Trim (vL7);
      ElName = sL7;
      ParElName = sL6;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL8 ) @<> '' );
      sL8 = TRIM(vL8);
      ElName = sL8;
      ParElName = sL7;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL9 ) @<> '' );
      sL9 = TRIM(vL9);
      ElName = sL9;
      ParElName = sL8;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL10 ) @<> '' );
      sL10 = TRIM(vL10);
      ElName = sL10;
      ParElName = sL9;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL11 ) @<> '' );
      sL11 = Trim (vL11);
      ElName = sL11;
      ParElName = sL10;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL12 ) @<> '' );
       sL12 = TRIM(vL12);
      ElName = sL12;
      ParElName = sL11;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL13 ) @<> '' );
      sL13 = TRIM(vL13);
      ElName = sL13;
      ParElName = sL12;
      DimensionElementInsert (DimName, '', ElName, sType);
      If (sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL14 ) @<> '' );
      sL14 = TRIM(vL14);
      ElName = sL14;
      ParElName = sL13;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;

   IF(TRIM( vL15 ) @<> '' );
      sL15 = Trim (vL15);
      ElName = sL15;
      ParElName = sL14;
      DimensionElementInsert (DimName, '', ElName, sType);
      IF(sType@<>'S');  
         DimensionElementComponentAdd (DimName, ParElName, ElName, nWeight); 
      ENDIF;
      ItemSkip;
   ENDIF;
ENDIF;

MetaDataRowCounter=MetaDataRowCounter+1;

#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****

IF(DataRowCounter= 1);

# Attribútum beíráshoz definiáljuk az attribútum nevét és típusát.
# Ha 30-nél több attribútum kell, akkor ezt a részt bővíteni kell.

   AttrName1 = SUBST(vA1, 4, LONG(vA1)-3);
   AttrType1 =  SUBST(vA1, 2, 1);

   AttrName2 = SUBST(vA2, 4, LONG(vA2)-3);
   AttrType2 =  SUBST(vA2, 2, 1);

   AttrName3 = SUBST(vA3, 4, LONG(vA3)-3);
   AttrType3 =  SUBST(vA3, 2, 1);

   AttrName4 = SUBST(vA4, 4, LONG(vA4)-3);
   AttrType4 =  SUBST(vA4, 2, 1);

   AttrName5 = SUBST(vA5, 4, LONG(vA5)-3);
   AttrType5 =  SUBST(vA5, 2, 1);

   AttrName6 = SUBST(vA6, 4, LONG(vA6)-3);
   AttrType6 =  SUBST(vA6, 2, 1);

   AttrName7 = SUBST(vA7, 4, LONG(vA7)-3);
   AttrType7 =  SUBST(vA7, 2, 1);

   AttrName8 = SUBST(vA8, 4, LONG(vA8)-3);
   AttrType8 =  SUBST(vA8, 2, 1);

   AttrName9 = SUBST(vA9, 4, LONG(vA9)-3);
   AttrType9 =  SUBST(vA9, 2, 1);

   AttrName10 = SUBST(vA10, 4, LONG(vA10)-3);
   AttrType10 =  SUBST(vA10, 2, 1);

   AttrName11 = SUBST(vA11, 4, LONG(vA11)-3);
   AttrType11 =  SUBST(vA11, 2, 1);

   AttrName12 = SUBST(vA12, 4, LONG(vA12)-3);
   AttrType12 =  SUBST(vA12, 2, 1);

   AttrName13 = SUBST(vA13, 4, LONG(vA13)-3);
   AttrType13 =  SUBST(vA13, 2, 1);

   AttrName14 = SUBST(vA14, 4, LONG(vA14)-3);
   AttrType14 =  SUBST(vA14, 2, 1);

   AttrName15 = SUBST(vA15, 4, LONG(vA15)-3);
   AttrType15 =  SUBST(vA15, 2, 1);

   AttrName16 = SUBST(vA16, 4, LONG(vA16)-3);
   AttrType16 =  SUBST(vA16, 2, 1);

   AttrName17 = SUBST(vA17, 4, LONG(vA17)-3);
   AttrType17 =  SUBST(vA17, 2, 1);

   AttrName18 = SUBST(vA18, 4, LONG(vA18)-3);
   AttrType18 =  SUBST(vA18, 2, 1);

   AttrName19 = SUBST(vA19, 4, LONG(vA19)-3);
   AttrType19 =  SUBST(vA19, 2, 1);

   AttrName20 = SUBST(vA20, 4, LONG(vA20)-3);
   AttrType20 =  SUBST(vA20, 2, 1);

   AttrName21 = SUBST(vA21, 4, LONG(vA21)-3);
   AttrType21 =  SUBST(vA21, 2, 1);

   AttrName22 = SUBST(vA22, 4, LONG(vA22)-3);
   AttrType22 =  SUBST(vA22, 2, 1);

   AttrName23 = SUBST(vA23, 4, LONG(vA23)-3);
   AttrType23 =  SUBST(vA23, 2, 2);

   AttrName24 = SUBST(vA24, 4, LONG(vA24)-3);
   AttrType24 =  SUBST(vA24, 2, 2);

   AttrName25 = SUBST(vA25, 4, LONG(vA25)-3);
   AttrType25 =  SUBST(vA25, 2, 2);

   AttrName26 = SUBST(vA26, 4, LONG(vA26)-3);
   AttrType26 =  SUBST(vA26, 2, 2);

   AttrName27 = SUBST(vA27, 4, LONG(vA27)-3);
   AttrType27 =  SUBST(vA27, 2, 2);

   AttrName28 = SUBST(vA28, 4, LONG(vA28)-3);
   AttrType28 =  SUBST(vA28, 2, 2);

   AttrName29 = SUBST(vA29, 4, LONG(vA29)-3);
   AttrType29 =  SUBST(vA29, 2, 2);

   AttrName30 = SUBST(vA30, 4, LONG(vA30)-3);
   AttrType30 =  SUBST(vA30, 2, 2);

ELSE;
   # ELEM NÉV MEGHATÁROZÁSA
   ElName = '';
   nCount = 1;
   WHILE( nCount <= 15 );
      sCount = NumberToString (nCount);
      varElName = TRIM(EXPAND ( '%' | 'vL' | sCount | '%' ) );
      IF(varElName @<> '' );
         ElName = varElName;
      ENDIF;
      nCount = nCount + 1;
   END;

   # ATTRIBÚTUM ÉRTÉKEK BEÍRÁSA
   # Csak akkor, ha a forrás nem üres és az attribútum kocka is üres, azaz nem töltöttünk rá már egy előző sorban.
   # Ha 20-nél több attribútum kell, akkor az számláló felső határát bővíteni kell
   nCount = 1;
   WHILE(nCount <= 30);
      sCount = NumberToString (nCount);
      AttrName = Expand ( '%' | 'AttrName' | sCount | '%' );
      AttrType =  Expand ( '%' | 'AttrType' | sCount | '%' );
      IF(Trim (AttrName) @<> '' );
         AttrValue = Expand ( '%' | 'vA' | sCount | '%' );
         IF(AttrType @= 'N' );
            IF( StringToNumber(AttrValue) <> 0 & ATTRN(DimName, Elname, AttrName) = 0); 
               AttrPutN ( StringToNumber(AttrValue), DimName, ElName, AttrName );
            ENDIF;
         ELSEIF( AttrType @= 'S' % AttrType @= 'A' );
            IF(AttrValue @<> '' & ATTRS(DimName, Elname, AttrName) @= ''); 
               AttrPutS ( AttrValue, DimName, ElName, AttrName );
            ENDIF;
         ENDIF;
      ENDIF;
      nCount = nCount + 1;
   END;
ENDIF;

DataRowCounter=DataRowCounter+1;


#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

ExecuteProcess('zSYS Maintenance Dimension Refresh All N Elements','pDimName',pDimName, 'pCallerID', sCallerID, 'pDebug', 0);

# ============= Process logging

####General LOGGING frame###
#ExecuteProcess('zSYS Process Log Close Entry','pProcessName',vsProcessName,'pStartTime',pStartTime,'pRandomNumber',sRandomNumber,'pProcessErrorLogFile',GetProcessErrorFilename);
####General LOGGING frame###

#endregion
