#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****
#Mohos Miklós 2023.07.25.

# kiegészítés - u.d. - súly input előtt kitölti az input mozgás segédkockát (naturália input processzhez) - 20231026

sCube = 'Weight and Limit';

sDimName = 'Period';
sHierName = 'Period';
sSubsetName = 'Actual Period N level'; 
#Botond 05.29 Input periodrol javítva

sActualMonth = CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type');
sActualYear= Subst(CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type'), 1, 4);

sEndMonth = pPeriod|'12';
sENDMonthI = HierarchySubsetElementGetIndex(sDimName, sHierName, sSubsetName, sEndMonth, 1);
sTheRealEnd = HierarchySubsetGetSize(sDimName, sHierName, sSubsetName);

#Delete brackets
sLength = LONG(pProduct);
sClearLast = Delet(pProduct,sLength,1);
sClearString = Delet(sClearLast,1,1);

sLengthValues = LONG(pValue);
sClearLastV = Delet(pValue,sLengthValues,1);
sClearValues = Delet(sClearLastV,1,1);

#Delete aposthropes
sClean = 0;
while ( sClean <> 1 );
	 sPos = SCAN( '''', sClearString );
	 sPosV = SCAN( '''', sClearValues );
	   if ((sPos <> 0) & (sPosV <> 0));
		  sClearString  = DELET(sClearString , sPos, 1 );
		  sClearValues  = DELET(sClearValues , sPosV, 1 );
	   else;
		  sClean = 1;
	   endif;
end;

# Actual Year Input
if(pPeriod @= sActualYear);
  sStartMonthI= HierarchySubsetElementGetIndex(sDimName, sHierName, sSubsetName, sActualMonth, 1);
#Delete commas and get value and id of the products
    sClean = 0;
    while ( sClean <> 1 );
	    sPos = SCAN ( ',', sClearString );
	    sPosV = SCAN( ',', sClearValues );
	  
	    if ((sPos <> 0) & (sPosV <> 0));
		    sProduct = Subst(sClearString, 1, sPos-1);
		    sValues = Subst(sClearValues, 1, sPosV-1);
#		LogOutput('INFO', 'info: '|sProduct |' ' |sValues);
        if(pJustThisMonth @= 'Y');
          i = sStartMonthI;
          while(i <= sEndMonthI);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
		        CellPutN(Numbr(sValues), sCube, pVersion, sPeriod,  sProduct, pWeight, 'Value');
		      i = i + 1;
          end;
        else;
          i = sStartMonthI;
          while(i <= sTheRealEnd);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
		        CellPutN(Numbr(sValues), sCube, pVersion, sPeriod,  sProduct, pWeight, 'Value');
		      i = i + 1;
          end;
        endif;
		    sClearString  = DELET(sClearString, sPos, 1);
		    sClearString = DELET(sClearString, 1, sPos-1);
		
		    sClearValues  = DELET(sClearValues, sPosV, 1);
		    sClearValues = DELET(sClearValues, 1, sPosV-1);
	    else;
		    sClean = 1;
		    sClearString = DELET(sClearString, 1, sPos);
		    sClearValues  = DELET(sClearValues, 1, sPosV);
		    if(pJustThisMonth @= 'Y');
          i = sStartMonthI;
          while(i <= sEndMonthI);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
		        CellPutN(Numbr(sClearValues), sCube, pVersion, sPeriod,  sClearString, pWeight, 'Value');
		      i = i + 1;
          end;
        else;
          i = sStartMonthI;
          while(i <= sTheRealEnd);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
            
		        CellPutN(Numbr(sClearValues), sCube, pVersion, sPeriod,  sClearString, pWeight, 'Value');
		      i = i + 1;
          end;
        endif;
	    endif;
    end;
# C input
elseif((Long(pPeriod)=4) & (pPeriod @<> sActualYear));
  sStartMonth = pPeriod|'01';
  sStartMonthI = HierarchySubsetElementGetIndex(sDimName, sHierName, sSubsetName, sStartMonth, 1);
    sClean = 0;
    while ( sClean <> 1 );
	    sPos = SCAN ( ',', sClearString );
	    sPosV = SCAN( ',', sClearValues );
	  
	    if ((sPos <> 0) & (sPosV <> 0));
		    sProduct = Subst(sClearString, 1, sPos-1);
		    sValues = Subst(sClearValues, 1, sPosV-1);
        if(pJustThisMonth @= 'Y');
          i = sStartMonthI;
          while(i <= sEndMonthI);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
          
            
		        CellPutN(Numbr(sValues), sCube, pVersion, sPeriod,  sProduct, pWeight, 'Value');
		      i = i + 1;
          end;
        else;
          i = sStartMonthI;
          while(i <= sTheRealEnd);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
            
		        CellPutN(Numbr(sValues), sCube, pVersion, sPeriod,  sProduct, pWeight, 'Value');
		      i = i + 1;
          end;
        endif;
		    sClearString  = DELET(sClearString, sPos, 1);
		    sClearString = DELET(sClearString, 1, sPos-1);
		
		    sClearValues  = DELET(sClearValues, sPosV, 1);
		    sClearValues = DELET(sClearValues, 1, sPosV-1);
	    else;
		    sClean = 1;
		    sClearString = DELET(sClearString, 1, sPos);
		    sClearValues  = DELET(sClearValues, 1, sPosV);
		    if(pJustThisMonth @= 'Y');
          i = sStartMonthI;
          while(i <= sEndMonthI);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
            
		        CellPutN(Numbr(sClearValues), sCube, pVersion, sPeriod,  sClearString, pWeight, 'Value');
		      i = i + 1;
          end;
        else;
          i = sStartMonthI;
          while(i <= sTheRealEnd);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
		        CellPutN(Numbr(sClearValues), sCube, pVersion, sPeriod,  sClearString, pWeight, 'Value');
		      i = i + 1;
          end;
        endif;
	    endif;
    end;
# N input
else;
  sClean = 0;
    while ( sClean <> 1 );
	    sPos = SCAN ( ',', sClearString );
	    sPosV = SCAN( ',', sClearValues );
	  
	    if ((sPos <> 0) & (sPosV <> 0));
		    sProduct = Subst(sClearString, 1, sPos-1);
		    sValues = Subst(sClearValues, 1, sPosV-1);
        if(pJustThisMonth @= 'Y');
          
          
		      CellPutN(Numbr(sValues), sCube, pVersion, pPeriod,  sProduct, pWeight, 'Value');
		    else;
		      sStartMonthI = HierarchySubsetElementGetIndex(sDimName, sHierName, sSubsetName, pPeriod, 1);
          i = sStartMonthI;
          while(i <= sTheRealEnd);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
            
		        CellPutN(Numbr(sValues), sCube, pVersion, sPeriod,  sProduct, pWeight, 'Value');
		      i = i + 1;
          end;
        endif;
        
		    sClearString  = DELET(sClearString, sPos, 1);
		    sClearString = DELET(sClearString, 1, sPos-1);
		
		    sClearValues  = DELET(sClearValues, sPosV, 1);
		    sClearValues = DELET(sClearValues, 1, sPosV-1);
	    else;
		    sClean = 1;
		    sClearString = DELET(sClearString, 1, sPos);
		    sClearValues  = DELET(sClearValues, 1, sPosV);
		    
		    if(pJustThisMonth @= 'Y');
		      
		      
		      CellPutN(Numbr(sClearValues), sCube, pVersion, pPeriod,  sClearString, pWeight, 'Value');
		    else;
		      sStartMonthI = HierarchySubsetElementGetIndex(sDimName, sHierName, sSubsetName, pPeriod, 1);
          i = sStartMonthI;
          while(i <= sTheRealEnd);
            sPeriod = SubsetGetElementName(sDimName,sSubsetName, i);
            
		        CellPutN(Numbr(sClearValues), sCube, pVersion, sPeriod, sClearString, pWeight, 'Value');
		      i = i + 1;
          end;
        endif;
	    endif;
    end;
endif;

#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****


# Módos Dávid 2024 02 13

sToday = Today(1);
CellPutS(sToday, '}ElementAttributes_Version', pVersion, 'Last Updated');
CellPutS(pUser, '}ElementAttributes_Version', pVersion, 'Last Updated By');



#endregion
