# átmenetileg kiszedtem a szabályokat input processz bugfixelés miatt - u.d. 20230625
# naturalia hier feederelés nem jó: opening N-es, csak 1 féle van, Closing 2 féle van, nem lehet 1-et 2-ből feederelni - u.d. 2023.07.21
# C-set elvileg nem kell feederelni, ha az alatta lévő N-esek jók és feederelve vannak
# létre kéne hozni az "Opening Naturalia" elemet az "Opening" helyett, és külön lehetne vezérelni/feederelni

### Általános szabályok
### MD - 2023.05.12.
### Tény verzió írhatóvá tétele
#XP feedert kiszedtem Miki 2023.08.10.

SKIPCHECK;

#['Subscription Plan Measure':'Base correction'] = N: STET; 

# nyitó behúzása az előző hónap záróértékéről
# az első elemet be kell tölteni ami a 202101
['Period':'202112'] = N: STET; 


### FEEDER 02
# C-es opening
['Subscription Plan Movement':'Opening'] = C:
IF( ELLEV('Period',!Period)>0,
   DB('Subscription Plan', !Version, DB('}ElementAttributes_Period', !Period, 'First_M_Y'), !Loyalty, !Sales Channel, !Source Product, !Target Product, 'Opening', !Subscription Plan Measure),
STET); 


### FEEDER 03
# C-es closing
['Subscription Plan Movement':'Subscription Plan Movement':'Closing'] = C:
IF( ELLEV('Period',!Period)>0,
  DB('Subscription Plan', !Version, DB('}ElementAttributes_Period', !Period, 'Last_M_Y'), !Loyalty, !Sales Channel, !Source Product, !Target Product, 'Subscription Plan Movement':'Closing', !Subscription Plan Measure),
  STET); 

['Subscription Plan Movement':'Naturalia Page Movement':'Closing'] = C:
IF( ELLEV('Period',!Period)>0,
  DB('Subscription Plan', !Version, DB('}ElementAttributes_Period', !Period, 'Last_M_Y'), !Loyalty, !Sales Channel, !Source Product, !Target Product, 'Naturalia Page Movement':'Closing', !Subscription Plan Measure),
  STET); 

# verzo szabályok
[]= N:
IF(ELISPAR('Version','Report',!Version) = 1,
STET,Continue);

# Mody 06 20
# éves értékek szabály
#### FEEDER 01
# N-es opening
['Subscription Plan Movement':'Opening'] = N:
   DB('Subscription Plan', !Version, DB('}ElementAttributes_Period', !Period, 'PREV_1M'), !Loyalty, !Sales Channel, !Source Product, !Target Product, 'Closing', !Subscription Plan Measure);

# TD UI Input measure = topdownból tranzakciós planbe input 
# Handling the New movements 
['Subscription Plan Measure':'TD UI Input', 'Source Product':'New', 'Subscription Plan Movement':'New increase',
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
DB('Subscription Topdown', !Version, !Period, !Target Product, 'New increase', 'UI Input');

#Counter booking will be calced on the other measure
['Subscription Plan Measure':'TD UI Input', 'Target Product':'New', 'Subscription Plan Movement':'New decrease',
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
0;

['Subscription Plan Measure':'TD UI Input', 'Subscription Plan Movement':'New increase',
'Sales Channel':'NA', 'Loyalty':'NA'] = N: stet;
# Handling the Terminated movements 
#Counter booking will be calced on the otehr measure
['Subscription Plan Measure':'TD UI Input', 'Target Product':'Terminated', 'Subscription Plan Movement':'Terminated increase',
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
0;



['Subscription Plan Measure':'TD UI Input', 'Source Product':'Terminated', 'Subscription Plan Movement':'Terminated decrease',
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
DB('Subscription Topdown', !Version, !Period, !Target Product, 'Terminated decrease', 'UI Input');

['Subscription Plan Measure':'TD UI Input', 'Subscription Plan Movement':'Terminated increase',
'Sales Channel':'NA', 'Loyalty':'NA'] = N: stet;

# Handling the Loyalty movements 
['Subscription Plan Measure':'TD UI Input', 'Subscription Plan Movement':{'Loyalty extension increase', 'Loyalty extension decrease'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
IF( !source product @<> !target product,
stet, Continue);

['Subscription Plan Measure':'TD UI Input', 'Subscription Plan Movement':'Loyalty extension increase','Sales Channel':'NA', 'Loyalty':'NA'] = N:
ROUND(DB('Subscription Topdown', !Version, !Period, !target product, 'Opening', 'Value')*
(1- SIGN(ABS(DB('Subscription Topdown', !Version, !Period, !target product, 'Loyalty Extension', 'UI Input'))))*
DB('Weight and Limit', !Version, !Period, !target product, 'Loyalty Extension Ratio', 'Value')+
SIGN(ABS(DB('Subscription Topdown', !Version, !Period, !target product, 'Loyalty Extension', 'UI Input')))*
DB('Subscription Topdown', !Version, !Period, !target product, 'Loyalty Extension', 'UI Input'));

['Subscription Plan Measure':'TD UI Input', 'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
IF(DB('Subscription Movement Assignment for Input', !Version, !Period, !Source Product, !Target Product, !Subscription Plan Movement, 'Switch Off Weight') = 0,
  stet, continue);

['Subscription Plan Measure':'TD UI Input', 'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
round(
  # switch off rate based on weights
  (DB('Subscription Movement Assignment for Input', !Version, !Period, !Source Product, !Target Product, !Subscription Plan Movement, 'Switch Off Weight')
  \ DB('Subscription Movement Assignment for Input', !Version, !Period, DB('}ElementAttributes_Product', !Source Product, 'Product Category')| ' Total', !Target Product, 'Migration increase', 'Switch Off Weight'))
  * DB('Subscription Topdown', !Version, !Period, !Target Product, 'Migration increase', 'UI Input')
);

['Subscription Plan Measure':'TD UI Input', 'Subscription Plan Movement':{'Retainer decrease', 'Upward migration decrease', 'Downward migration decrease'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
round(
  # switch off rate based on weights
  (DB('Subscription Movement Assignment for Input', !Version, !Period, !Source Product, !Target Product, !Subscription Plan Movement, 'Switch On Weight')
  \ DB('Subscription Movement Assignment for Input', !Version, !Period, DB('}ElementAttributes_Product', !Source Product, 'Product Category')| ' Total', !Target Product, 'Migration decrese', 'Switch On Weight'))
  * DB('Subscription Topdown', !Version, !Period, !Target Product, 'Migration decrese', 'UI Input')
);

# max value calculation, so the rounding is only viable for one source product target product pair. rounding will only have a value when migr.value=group max migr.value
['Subscription Plan Measure':'TD UI Input Max Group Value', 'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
ConsolidatedMax(1, 'Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, 
  DB('}ElementAttributes_Product', !Source Product, 'Product Category')| ' Total', 
  !Target Product, !Subscription Plan Movement, 'TD UI Input');
  
['Subscription Plan Measure':'TD UI Input Max Group Value', 'Subscription Plan Movement':{'Retainer decrease', 'Upward migration decrease', 'Downward migration decrease'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
ConsolidatedMax(1, 'Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, 
  DB('}ElementAttributes_Product', !Source Product, 'Product Category')| ' Total', 
  !Target Product, !Subscription Plan Movement, 'TD UI Input');
  
#BLOCK
#TD UI Input Rounding Correction

['Subscription Plan Measure':'TD UI Input Rounding Correction', 'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
(1-abs(sign(['Subscription Plan Measure':'TD UI Input Max Group Value']-['Subscription Plan Measure':'TD UI Input']))) * 
DB('Weight and Limit', !Version, !Period,!Target Product, 'Switch off weight', 'RoundingCorrFlag')*
DB('Subscription Movement Assignment for Input', !Version, !Period, !Source Product, !Target Product, !Subscription Plan Movement, 'Stored')*
(DB('Subscription Topdown', !Version, !Period, !Target Product, 'Migration increase', 'UI Input')-
DB('Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, DB('}ElementAttributes_Product', !Source Product, 'Product Category')| ' Total', !Target Product, 'Migration increase', 'TD UI Input')
);

['Subscription Plan Measure':'TD UI Input Rounding Correction', 'Subscription Plan Movement':{'Retainer decrease', 'Upward migration decrease', 'Downward migration decrease'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
(1-abs(sign(['Subscription Plan Measure':'TD UI Input Max Group Value']-['Subscription Plan Measure':'TD UI Input']))) * 
DB('Weight and Limit', !Version, !Period, !Target Product, 'Switch on weight', 'RoundingCorrFlag')*
DB('Subscription Movement Assignment for Input', !Version, !Period, !Source Product, !Target Product, !Subscription Plan Movement, 'Stored')*
(DB('Subscription Topdown', !Version, !Period, !Target Product, 'Migration decrese', 'UI Input')-
DB('Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, DB('}ElementAttributes_Product', !Source Product, 'Product Category')| ' Total', !Target Product, 'Migration decrese', 'TD UI Input')
);

#BLOCK
#TD UI Input Counter Booking
#['Sales Channel':'NA', 'Loyalty':'NA','Subscription Plan Measure':'TD UI Input Counter Booking'] = N:


['Sales Channel':'NA', 'Loyalty':'NA','Subscription Plan Measure':'TD UI Input Counter Booking'] = N:
DB('Subscription Plan', 
  !Version, 
  !Period, 
  !Loyalty, 
  !Sales Channel, 
  !Target Product, 
  !Source Product, 
  DB('}ElementAttributes_Subscription Plan Movement', !Subscription Plan Movement, 'Opposite'), 
  'TD UI Input'
)+
DB('Subscription Plan', 
  !Version, 
  !Period, 
  !Loyalty, 
  !Sales Channel, 
  !Target Product, 
  !Source Product, 
  DB('}ElementAttributes_Subscription Plan Movement', !Subscription Plan Movement, 'Opposite'), 
  'TD UI Input Rounding Correction'
);

#BLOCK
#Matrix UI Input
['Subscription Plan Measure':'Matrix UI Input'] = N:STET;
#BLOCK
#Transaction Min Limit Correction
['Subscription Plan Measure':'Transaction Min Limit Correction', 'Source Product':'Terminated', 'Subscription Plan Movement':'Terminated decrease',
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
DB('Subscription Topdown', !Version, !Period, !Target Product, 'Terminated decrease', 'Min Limit Input');

['Subscription Plan Measure':'Transaction Min Limit Correction', 'Subscription Plan Movement':{'Retainer decrease', 'Upward migration decrease', 'Downward migration decrease'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
ROUND(DB('Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, !Source Product, !Target Product, !Subscription Plan Movement, 'TD UI Input Total') \
DB('Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, 'Total Products', !Target Product, !Subscription Plan Movement, 'TD UI Input Total') *
DB('Subscription Topdown', !Version, !Period, !target Product, 'Migration decrese', 'Min Limit Input'));

['Subscription Plan Measure':'Transaction Min Limit Correction'] = N:STET;
#BLOCK
#Transaction Max Limit Correction

['Subscription Plan Measure':'Transaction Max Limit Correction', 'Source Product':'New', 'Subscription Plan Movement':'New Increase',
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
DB('Subscription Topdown', !Version, !Period, !Target Product, 'New increase', 'Max Limit Input');

['Subscription Plan Measure':'Transaction Max Limit Correction', 'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'},
'Sales Channel':'NA', 'Loyalty':'NA'] = N:
ROUND(DB('Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, !Source Product, !Target Product, !Subscription Plan Movement, 'TD UI Input Total') \
DB('Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, 'Total Products', !Target Product, !Subscription Plan Movement, 'TD UI Input Total') *
DB('Subscription Topdown', !Version, !Period, !target Product, 'Migration increase', 'Max Limit Input'));

['Subscription Plan Measure':'Transaction Max Limit Correction'] = N:STET;
#BLOCK
#Transaction Limit Balance Correction
['Sales Channel':'NA', 'Loyalty':'NA','Subscription Plan Measure':'Transaction Limit Balance Correction'] =N:
DB('Subscription Plan', 
  !Version, 
  !Period, 
  !Loyalty, 
  !Sales Channel, 
  !Target Product, 
  !Source Product, 
  DB('}ElementAttributes_Subscription Plan Movement', !Subscription Plan Movement, 'Opposite'), 
  'Transaction Min Limit Correction'
)+
DB('Subscription Plan', 
  !Version, 
  !Period, 
  !Loyalty, 
  !Sales Channel, 
  !Target Product, 
  !Source Product, 
  DB('}ElementAttributes_Subscription Plan Movement', !Subscription Plan Movement, 'Opposite'), 
  'Transaction Max Limit Correction'
);

['Subscription Plan Measure':'Transaction Limit Balance Correction'] = N:STET;


#BLOCK
#Channel Split Calculated
['Subscription Plan Measure':'Channel Split Calculated'] = N:STET;
#BLOCK
#Channel Split Rounding Correction
['Subscription Plan Measure':'Channel Split Rounding Correction'] = N:STET;

# calculate all decrease elements 
['Sales Channel':'NA', 'Loyalty':'NA', 'Subscription Plan Movement':'Opening'] = stet;

['Sales Channel':'NA', 'Loyalty':'NA','Subscription Plan Measure':'TD UI Input Counter Booking',
'Subscription Plan Movement':{'New increase','New decrease','Terminated increase','Terminated decrease'}] = N:
STET;

#### Loyalty 0, Sales Channel:Call center
#['Loyalty':'0','Sales Channel':'Call center','Subscription Plan Measure':'Base Input'] =
#IF( DIMIX('Period',!Period) < DIMIX('Period',DB('zSYS Maintenance Parameter','ActualMonth','S Type')),
#  # fact period
#  Continue,
#  DB('Subscription Plan', !Version, !Period, 'NA', 'NA', !Source Product, !Target Product, !Subscription Plan Movement, 'Transaction Final Value')
#  *
#  DB('Sales Channel And Loyalty', !Version, !Period, '0', 'Call center', DB('}ElementAttributes_Source Product', !Source Product, 'Product Category'), !Subscription Plan Movement, 'Value')
#    \100
#  );
#  
#### Loyalty 1, Sales Channel:Call center
#['Loyalty':'1','Sales Channel':'Call center','Subscription Plan Measure':'Base Input'] =
#IF( DIMIX('Period',!Period) < DIMIX('Period',DB('zSYS Maintenance Parameter','ActualMonth','S Type')),
#  # fact period
#  Continue,
#  DB('Subscription Plan', !Version, !Period, 'NA', 'NA', !Source Product, !Target Product, !Subscription Plan Movement, 'Transaction Final Value')
#  *
#  DB('Sales Channel And Loyalty', !Version, !Period, '1', 'Call center', DB('}ElementAttributes_Source Product', !Source Product, 'Product Category'), !Subscription Plan Movement, 'Value')
#    \100
#  );
#### Loyalty 0, Sales Channel:Call center
#['Loyalty':'0','Sales Channel':'Customer Service','Subscription Plan Measure':'Base Input'] =
#IF( DIMIX('Period',!Period) < DIMIX('Period',DB('zSYS Maintenance Parameter','ActualMonth','S Type')),
#  # fact period
#  Continue,
#  DB('Subscription Plan', !Version, !Period, 'NA', 'NA', !Source Product, !Target Product, !Subscription Plan Movement, 'Transaction Final Value')
#  *
#  DB('Sales Channel And Loyalty', !Version, !Period, '0', 'Customer Service', DB('}ElementAttributes_Source Product', !Source Product, 'Product Category'), !Subscription Plan Movement, 'Value')
#  \100
#  );
#### Loyalty 1, Sales Channel:Customer Service
#['Loyalty':'1','Sales Channel':'Customer Service','Subscription Plan Measure':'Base Input'] =
#IF( DIMIX('Period',!Period) < DIMIX('Period',DB('zSYS Maintenance Parameter','ActualMonth','S Type')),
#  # fact period
#  Continue,
#  DB('Subscription Plan', !Version, !Period, 'NA', 'NA', !Source Product, !Target Product, !Subscription Plan Movement, 'Transaction Final Value')
#  *
#  DB('Sales Channel And Loyalty', !Version, !Period, '1', 'Customer Service', DB('}ElementAttributes_Source Product', !Source Product, 'Product Category'), !Subscription Plan Movement, 'Value')
#    \100
#  );
#
#


FEEDERS;
### opening N-es
### FEEDER 01
# sima hier
##INTERNAL FEEDERS
['Subscription Plan Movement':'Subscription Plan Movement':'Closing','Version':'Forecast'] =>
DB('Subscription Plan', !Version, DB('}ElementAttributes_Period', !Period, 'NEXT_1M'), !Loyalty, !Sales Channel, !Source Product, !Target Product, 'Opening', !Subscription Plan Measure);

['Subscription Plan Measure':{'TD UI Input'}]=>
['Subscription Plan Measure':'TD UI Input Rounding Correction'];

['Subscription Plan Measure':{'TD UI Input Rounding Correction','TD UI Input'}]=>
DB('Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, !Target Product, !Source Product, DB('}ElementAttributes_Subscription Plan Movement', !Subscription Plan Movement, 'Opposite'), 'TD UI Input Counter Booking');

['Subscription Plan Measure':'TD UI Input Total', 'Subscription Plan Movement':{'Retainer decrease', 'Upward migration decrease', 'Downward migration decrease'},
'Sales Channel':'NA', 'Loyalty':'NA'] =>
['Subscription Plan Measure':'Transaction Min Limit Correction'];

['Subscription Plan Measure':'TD UI Input Total', 'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'},
'Sales Channel':'NA', 'Loyalty':'NA'] =>
['Subscription Plan Measure':'Transaction Max Limit Correction'];

['Subscription Plan Measure':{'Transaction Min Limit Correction','Transaction Max Limit Correction'}]=>
DB('Subscription Plan', !Version, !Period, !Loyalty, !Sales Channel, !Target Product, !Source Product, 
DB('}ElementAttributes_Subscription Plan Movement', !Subscription Plan Movement, 'Opposite'), 'Transaction Limit Balance Correction');

##EXTERNAL FEEDER
['Subscription Plan Measure':{'TD UI Input Rounding Correction','TD UI Input','TD UI Input Counter Booking'},
'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'}] =>
DB('Subscription Topdown', !Version, !Period, !Target Product,'Migration increase', 'TD UI Input');

['Subscription Plan Measure':{'TD UI Input Rounding Correction','TD UI Input','TD UI Input Counter Booking'},
'Subscription Plan Movement':{'Retainer decrease', 'Upward migration decrease', 'Downward migration decrease'}] =>
DB('Subscription Topdown', !Version, !Period, !Target Product,'Migration decrese', 'TD UI Input');

['Subscription Plan Measure':{'Matrix UI Input'},
'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'}] =>
DB('Subscription Topdown', !Version, !Period, !Target Product,'Migration increase', 'Matrix UI Input');
['Subscription Plan Measure':{'Matrix UI Input'},
'Subscription Plan Movement':{'Retainer decrease', 'Upward migration decrease', 'Downward migration decrease'}] =>
DB('Subscription Topdown', !Version, !Period, !Target Product,'Migration decrese', 'Matrix UI Input');

['Subscription Plan Measure':{'Matrix UI Input'},
'Subscription Plan Movement':{'New increase','terminated decrease'}] =>
DB('Subscription Topdown', !Version, !Period, !Target Product,!Subscription Plan Movement, 'Matrix UI Input');

['Subscription Plan Measure':{'Matrix UI Input'},
'Subscription Plan Movement':{'Loyalty extension increase'}] =>
DB('Subscription Topdown', !Version, !Period, !Target Product,'Loyalty extension', 'Matrix UI Input');

['Subscription Plan Measure':{'Transaction Max Limit Correction'},
'Subscription Plan Movement':{'Retainer increase', 'Upward migration increase', 'Downward migration increase'}] =>
DB('Subscription Topdown', !Version, !Period, !Target Product,'Migration increase', 'Transaction Limit Correction');

['Subscription Plan Measure':{'Transaction Min Limit Correction'},
'Subscription Plan Movement':{'Retainer decrease', 'Upward migration decrease', 'Downward migration decrease'}] =>
DB('Subscription Topdown', !Version, !Period, !Target Product,'Migration decrese', 'Transaction Limit Correction');


['Loyalty':'NA','Sales Channel':'NA','Subscription Plan Movement':'Subscription Plan Movement':'Loyalty extension increase',
'Subscription Plan Measure':'Transaction Final Value'] =>
['Loyalty':'Total','Sales Channel':'Total','Subscription Plan Measure':'Base Input'];
 
 
