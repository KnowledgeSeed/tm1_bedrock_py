#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2023.10.12
# Originator                         Ullmann Dávid
# Purpose                            Process for a general sales page excel import
# Change Date                             
# Change Request Reference              
# Change Made by                     
# =========================================================

sCubeName_Main          = 'Subscription Plan';
sCubeName_Assignment    = 'Subscription Movement Assignment';
sCubeName_WeightLimit   = 'Weight and Limit';

sDimensionName_Period   = 'Period';
sDimensionName_Loyalty  = 'Loyalty';
sDimensionName_Channel  = 'Sales Channel';
sDimensionName_SProduct = 'Source Product';
sDimensionName_TProduct = 'Target Product';
sDimensionName_Version  = 'Version';
sDimensionName_Movement = 'Subscription Plan Movement';
sDimensionName_Measure  = 'Subscription Plan Measure';
sHierarchyName_Period   = 'Period';
sHierarchyName_Loyalty  = 'Loyalty';
sHierarchyName_Channel  = 'Sales Channel';
sHierarchyName_SProduct = 'Source Product';
sHierarchyName_TProduct = 'Target Product';
sHierarchyName_Version  = 'Version';
sHierarchyName_Movement = 'Subscription Plan Movement';

nFirstDataCol        = 2;
nLastDataCol         = 43;
sActualPeriod        = CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type');
pFileLocation        = CellGetS('zSYS Maintenance Parameter', 'Import Data Directory Path', 'S Type');
sFile                = pFileLocation | pFileName;

sColumnDelimiter     = If ( pColumnDelimiter @= '' , ',' , pColumnDelimiter );
sDecimalSeparator    = If ( pDecimalSeparator @= '' , '.' , pDecimalSeparator );
sThousandSeparator   = pThousandSeparator;
sQuoteChar           = If ( pQuoteChar @= '' , '"' , pQuoteChar );
sCharacterSet        = If ( pCharacterSet @= '' , 'TM1CS_UTF8' , pCharacterSet );
  
# define and set CSV as data source
DataSourceType = 'CHARACTERDELIMITED';
DataSourceNameForServer = sFile;
DataSourceNameForClient = sFile;
DatasourceASCIIHeaderRecords = 0;
DatasourceASCIIQuoteCharacter = sQuoteChar;
DataSourceASCIIDelimiter = sColumnDelimiter;
SetInputCharacterSet ( sCharacterSet );

nRowIndex = 0;

# creating necessary input parameters

sMode = '';
sSourceProduct = '';
sTargetProduct = '';
sMovement = '';
sLoyalty = '';
sChannel = '';
sMaincategory = '';
sParameterDimension = '';

#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

nRowIndex = nRowIndex + 1;


# row 1: get all parameters
if(nRowIndex = 1);
  sMode = Expand('%v8%');
  sMaincategory = Expand('%v4%');
  sLoyalty = Expand('%v16%');
  
  # transform loyalty parameter data into something that makes sense
  if(sLoyalty @='Σ');
    sLoyalty = 'Total';
  else;
    sLoyalty = numbertostring(StringToNumberEx(sLoyalty, sDecimalSeparator, sThousandSeparator));
  endif;
  
  # getting other parameter data with the mode
  if(sMode @= 'movement');
    
    sSourceProduct = DimensionElementPrincipalName(sDimensionName_SProduct, expand('%v10%'));
    sChannel       = expand('%v12%');
    sTargetProduct = DimensionElementPrincipalName(sDimensionName_TProduct, expand('%v14%'));
    sParameterDimension = sDimensionName_Movement;
    
    if(Scan('.1',sSourceProduct)>0);
      sSourceProduct = Delet(sSourceProduct,Scan('.1',sSourceProduct),Long('.1'));
    endif;
    
    if(Scan('.1',sTargetProduct)>0);
      sTargetProduct = Delet(sTargetProduct,Scan('.1',sTargetProduct),Long('.1'));
    endif;
    
  elseif(sMode @= 'channel');
    
    sSourceProduct = DimensionElementPrincipalName(sDimensionName_SProduct, expand('%v10%'));
    sTargetProduct = DimensionElementPrincipalName(sDimensionName_TProduct, expand('%v12%'));
    sMovement      = DimensionElementPrincipalName(sDimensionName_Movement, expand('%v14%'));
    sParameterDimension = sDimensionName_Channel;
    
    if(Scan('.1',sSourceProduct)>0);
      sSourceProduct = Delet(sSourceProduct,Scan('.1',sSourceProduct),Long('.1'));
    endif;
    
    if(Scan('.1',sTargetProduct)>0);
      sTargetProduct = Delet(sTargetProduct,Scan('.1',sTargetProduct),Long('.1'));
    endif;
    
  elseif(sMode @= 'source');
    
    sChannel       = expand('%v10%');
    sTargetProduct = DimensionElementPrincipalName(sDimensionName_TProduct, expand('%v12%'));
    sMovement      = DimensionElementPrincipalName(sDimensionName_Movement, expand('%v14%'));
    sParameterDimension = sDimensionName_SProduct;
    
    if(Scan('.1',sTargetProduct)>0);
      sTargetProduct = Delet(sTargetProduct,Scan('.1',sTargetProduct),Long('.1'));
    endif;
    
  elseif(sMode @= 'target');
   
    sSourceProduct = DimensionElementPrincipalName(sDimensionName_SProduct, expand('%v10%'));
    sChannel       = expand('%v12%');
    sMovement      = DimensionElementPrincipalName(sDimensionName_Movement, expand('%v14%'));
    sParameterDimension = sDimensionName_TProduct;
    
    if(Scan('.1',sSourceProduct)>0);
      sSourceProduct = Delet(sSourceProduct,Scan('.1',sSourceProduct),Long('.1'));
    endif;
    
  endif;
  
# row 4: get period data
elseif(nRowIndex = 4);
  
  sCol1  =  Expand('%v'| NumberToString(nFirstDataCol + 0) |'%');
  sCol2  =  Expand('%v'| NumberToString(nFirstDataCol + 1) |'%');
  sCol3  =  Expand('%v'| NumberToString(nFirstDataCol + 2) |'%');
  sCol4  =  Expand('%v'| NumberToString(nFirstDataCol + 3) |'%');
  sCol5  =  Expand('%v'| NumberToString(nFirstDataCol + 4) |'%');
  sCol6  =  Expand('%v'| NumberToString(nFirstDataCol + 5) |'%');
  sCol7  =  Expand('%v'| NumberToString(nFirstDataCol + 6) |'%');
  sCol8  =  Expand('%v'| NumberToString(nFirstDataCol + 7) |'%');
  sCol9  =  Expand('%v'| NumberToString(nFirstDataCol + 8) |'%');
  sCol10 =  Expand('%v'| NumberToString(nFirstDataCol + 9) |'%');
  sCol11 =  Expand('%v'| NumberToString(nFirstDataCol + 10) |'%');
  sCol12 =  Expand('%v'| NumberToString(nFirstDataCol + 11) |'%');
  sCol13 =  Expand('%v'| NumberToString(nFirstDataCol + 12) |'%');
  sCol14 =  Expand('%v'| NumberToString(nFirstDataCol + 13) |'%');
  sCol15 =  Expand('%v'| NumberToString(nFirstDataCol + 14) |'%');
  sCol16 =  Expand('%v'| NumberToString(nFirstDataCol + 15) |'%');
  sCol17 =  Expand('%v'| NumberToString(nFirstDataCol + 16) |'%');
  sCol18 =  Expand('%v'| NumberToString(nFirstDataCol + 17) |'%');
  sCol19 =  Expand('%v'| NumberToString(nFirstDataCol + 18) |'%');
  sCol20 =  Expand('%v'| NumberToString(nFirstDataCol + 19) |'%');
  sCol21 =  Expand('%v'| NumberToString(nFirstDataCol + 20) |'%');
  sCol22 =  Expand('%v'| NumberToString(nFirstDataCol + 21) |'%');
  sCol23 =  Expand('%v'| NumberToString(nFirstDataCol + 22) |'%');
  sCol24 =  Expand('%v'| NumberToString(nFirstDataCol + 23) |'%');
  sCol25 =  Expand('%v'| NumberToString(nFirstDataCol + 24) |'%');
  sCol26 =  Expand('%v'| NumberToString(nFirstDataCol + 25) |'%');
  sCol27 =  Expand('%v'| NumberToString(nFirstDataCol + 26) |'%');
  sCol28 =  Expand('%v'| NumberToString(nFirstDataCol + 27) |'%');
  sCol29 =  Expand('%v'| NumberToString(nFirstDataCol + 28) |'%');
  sCol30 =  Expand('%v'| NumberToString(nFirstDataCol + 29) |'%');
  sCol31 =  Expand('%v'| NumberToString(nFirstDataCol + 30) |'%');
  sCol32 =  Expand('%v'| NumberToString(nFirstDataCol + 31) |'%');
  sCol33 =  Expand('%v'| NumberToString(nFirstDataCol + 32) |'%');
  sCol34 =  Expand('%v'| NumberToString(nFirstDataCol + 33) |'%');
  sCol35 =  Expand('%v'| NumberToString(nFirstDataCol + 34) |'%');
  sCol36 =  Expand('%v'| NumberToString(nFirstDataCol + 35) |'%');
  sCol37 =  Expand('%v'| NumberToString(nFirstDataCol + 36) |'%');
  sCol38 =  Expand('%v'| NumberToString(nFirstDataCol + 37) |'%');
  sCol39 =  Expand('%v'| NumberToString(nFirstDataCol + 38) |'%');
  sCol40 =  Expand('%v'| NumberToString(nFirstDataCol + 39) |'%');
  sCol41 =  Expand('%v'| NumberToString(nFirstDataCol + 40) |'%');
  sCol42 =  Expand('%v'| NumberToString(nFirstDataCol + 41) |'%');
  
# row 4+: data section
elseif(nRowIndex > 4);
  
  # set parameter dimension element
  if(sMode @= 'movement');
    sMovement = DimensionElementPrincipalName(sDimensionName_Movement, expand('%v1%'));
  elseif(sMode @= 'channel');
    sChannel = expand('%v1%');
  elseif(sMode @= 'source');
    sSourceProduct = DimensionElementPrincipalName(sDimensionName_SProduct, expand('%v1%'));
    if(Scan('.1',sSourceProduct)>0);
      sSourceProduct = Delet(sSourceProduct,Scan('.1',sSourceProduct),Long('.1'));
    endif;
                
  elseif(sMode @= 'target');
    sTargetProduct = DimensionElementPrincipalName(sDimensionName_TProduct, expand('%v1%'));
    if(Scan('.1',sTargetProduct)>0);
      sTargetProduct = Delet(sTargetProduct,Scan('.1',sTargetProduct),Long('.1'));
    endif;
  endif;
  
  # quit if necessary
  if(CellGetN('Subscription Movement Assignment', sSourceProduct, sTargetProduct, sMovement, 'Stored') < 1);
    itemskip;
  endif;
  
  if(ElLev(sParameterDimension, expand('%v1%')) > 0);
    itemskip;
  endif;
  
  nColumn = nFirstDataCol;
  sCurrentYear = '0';
  while(nColumn <= nLastDataCol);
    
    # generate periods from excel that make sense
    sCurrentDate = numbertostring(StringToNumberEx(Expand('%sCol'| NumberToString(nColumn - nFirstDataCol + 1) |'%'), sDecimalSeparator, sThousandSeparator));
    if(Long(sCurrentDate) = 4);
      sCurrentYear = sCurrentDate;
    else;
      sCurrentDate = sCurrentYear | Fill('0', 2-Long(sCurrentDate)) | sCurrentDate;
    endif;
    
    # can only input to the C type period elements if we are at the end of the subset. also, N type periods are okay if were after actual period
    if(
      (ElementType(sDimensionName_Period, sDimensionName_Period, sCurrentDate) @= 'N' 
      & dimix(sDimensionName_Period, sCurrentDate)>=dimix(sDimensionName_Period, sActualPeriod)) 
      % nColumn >= 40
    );
      sCurrentValue = Expand('%v'| NumberToString(nColumn) |'%');
      nCurrentValue = StringToNumberEX(sCurrentValue, pDecimalSeparator, pThousandSeparator);
      
      
#      LogOutput('INFO', 'source:'|sSourceProduct | ' target:' | sTargetProduct | ' movement:' | sMovement | ' loyalty:'|sLoyalty
#              | ' channel:'|sChannel | ' period: ' | sCurrentDate | ' category:'|sMaincategory | ' value:' | sCurrentValue);
      
      
      
      ExecuteProcess('zSYS Analogic UI Subscription Plan Input Spread Period',
         'pSourceProduct', sSourceProduct,
         'pTargetProduct', sTargetProduct,
         'pMovement', sMovement,
         'pLoyalty', sLoyalty,
         'pChannel', sChannel,
         'pPeriod', sCurrentDate,
         'pMaincategory', sMaincategory,
         'pInput', nCurrentValue,
         'pRecursionIndex', 0,
         'pVersion', pVersion,
         'pUser', pUser
        );
    endif;
   
  nColumn = nColumn + 1;
  end;
  
endif;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
