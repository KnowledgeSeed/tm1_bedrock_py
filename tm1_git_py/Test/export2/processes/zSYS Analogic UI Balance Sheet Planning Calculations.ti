#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****
#****Begin: Generated Statements***
#****End: Generated Statements****

nLedgerIndex = 1;
sDim = 'Balance Sheet Planning Ledger';

################################################################################################################

IF(pPage = 1);
#### Befektetett eszkozok
sSub = 'AllMemberCalculation';
sMdx = 
'{
	TM1FILTERBYLEVEL({
		TM1DRILLDOWNMEMBER({
			[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Befektetett eszkozok]
		}, ALL, RECURSIVE)
	}, 0)
}';
SubsetCreateByMDX(sSub ,sMdx , sDim, 1);
nSubsetSize = SubsetGetSize(sDim, 'AllMemberCalculation');
ENDIF;

################################################################################################################

IF(pPage = 2);
#### Keszletek
sSub = 'AllMemberCalculation';
sMdx = 
'{
	TM1FILTERBYLEVEL({
		TM1DRILLDOWNMEMBER({
			[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Keszletek]
		}, ALL, RECURSIVE)
	}, 0)
}';
SubsetCreateByMDX(sSub ,sMdx , sDim, 1);
nSubsetSize = SubsetGetSize(sDim, 'AllMemberCalculation');
ENDIF;

################################################################################################################

IF(pPage = 3);
#### Kovetelesek, penzugyi eszkozok
sSub = 'AllMemberCalculation';
sMdx = 
'{
	TM1FILTERBYLEVEL({
		TM1DRILLDOWNMEMBER({
			[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Kovetelesek, penzugyi eszkozok]
		}, ALL, RECURSIVE)
	}, 0)
}';
SubsetCreateByMDX(sSub ,sMdx , sDim, 1);
nSubsetSize = SubsetGetSize(sDim, 'AllMemberCalculation');
ENDIF;

################################################################################################################

IF(pPage = 4);
#### Forrasok
sSub = 'AllMemberCalculation';
sMdx = 
'{
	TM1FILTERBYLEVEL({
		TM1DRILLDOWNMEMBER({
			[Balance Sheet Planning Ledger].[Balance Sheet Planning Ledger].[Forrasok]
		}, ALL, RECURSIVE)
	}, 0)
}';

SubsetCreateByMDX(sSub ,sMdx , sDim, 1);
nSubsetSize = SubsetGetSize(sDim, 'AllMemberCalculation');
ENDIF;


#Botond 11.19

sLedgerSubset = 'AllMemberCalculation';

WHILE(nLedgerIndex <= nSubsetSize);

sLedger = HierarchySubsetGetElementName(sDim, sDim, sLedgerSubset, nLedgerIndex);

IF(pMode = 3);  
  
sCapexTetel = CellGetS('}ElementAttributes_Balance Sheet Planning Ledger', sLedger, 'Capex tetel');
IF( sCapexTetel @<> '1'  );
  
    ExecuteProcess('zSYS Analogic UI Balance Sheet Planning Input',
   'pMode', pMode,
   'pLedger', sLedger,
   'pValue', pValue,
   'pVersion', pVersion,
   'pUser', pUser
  );

ENDIF;
ENDIF;

IF(pMode = 4);  
  
sCapexTetel = CellGetS('}ElementAttributes_Balance Sheet Planning Ledger', sLedger, 'Capex tetel');
IF( sCapexTetel @<> '1'  );
  
    ExecuteProcess('zSYS Analogic UI Balance Sheet Planning Input',
   'pMode', pMode,
   'pLedger', sLedger,
   'pVersion', pVersion,
   'pUser', pUser
  );

ENDIF;
ENDIF;

IF(pMode = 5);  
  
sCapexTetel = CellGetS('}ElementAttributes_Balance Sheet Planning Ledger', sLedger, 'Capex tetel');
IF( sCapexTetel @<> '1'  );
  
    ExecuteProcess('zSYS Analogic UI Balance Sheet Planning Input',
   'pMode', pMode,
   'pLedger', sLedger,
   'pVersion', pVersion,
   'pUser', pUser
  );

ENDIF;
ENDIF;

IF(pMode = 6);  
  
sCapexTetel = CellGetS('}ElementAttributes_Balance Sheet Planning Ledger', sLedger, 'Capex tetel');
IF( sCapexTetel @<> '1'  );
  
    ExecuteProcess('zSYS Analogic UI Balance Sheet Planning Input',
   'pMode', pMode,
   'pLedger', sLedger,
   'pVersion', pVersion,
   'pUser', pUser
  );
  
ENDIF;
ENDIF;

nLedgerIndex = nLedgerIndex + 1;

END;



#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****

sToday = Today(1);
CellPutS(sToday, '}ElementAttributes_Version', pVersion, 'Last Updated');
CellPutS(pUser, '}ElementAttributes_Version', pVersion, 'Last Updated By');
#endregion
