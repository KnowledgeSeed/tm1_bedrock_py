#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2015/02/03
# Originator                                 Moravcsik Zsolt
# Purpose                                   General Process to viewzeroout target cube, if z_sys_viewzeroout subset exists by a dimension it is use it if it is not exists just create a n level element MDX
# This is a general process to dynamically clear the given cube. use to parameter 1 for the cube name which will be view zeroouted
# The second a unique number wihch has been generated by the caller process by this Round ( RAND * 1000000). This is for unique run time information (beware of parallel collisions)
# Please use this process calling every time: ExecuteProcess('zSYS Cube ViewZeroOut','pCubeName',pCubeName,'pRandomIdentifier',Round ( RAND * 1000000));
# Change Date                           
# Change Request Reference    
# Change Made by                     
# =========================================================

# & @=

# Central logging - start
nRandomNumber = Round ( RAND * 1000000);
sRandomNumber = NumberToString(nRandomNumber);
pStartTime=NumberToString(NOW());
pProcessName =  GetProcessName();
pParams= 'pCubeName|'|pCubeName;

# Define variables
vsProcessName =  GetProcessName();
vsTimeStamp = TIMST(NOW(),'\Y\m\d\h\i\s');
vsViewName = 'sys.'  | GetProcessName() | NumberToString ( pRandomIdentifier );
vsSubName = 'z_sys_viewzeroout'  | NumberToString ( pRandomIdentifier );

# Run checks
IF(CubeExists(pCubeName) = 0);
   IF(pDebug = 1);
      LogoutPut('INFO','Cube does not exist: '|pCubeName);
   ENDIF;
   ProcessQuit();
ENDIF;

IF(ViewExists(pCubeName,vsViewName) = 0);
   ViewCreate(pCubeName, vsViewname);
   IF(pDebug = 1);
      LogoutPut('INFO','View Created: '|vsViewName);
   ENDIF;
ENDIF;

i = 1;
WHILE (TABDIM (pCubeName,i) @<>''); 
   vsDimname = TABDIM (pCubeName,i);

   IF(SubsetExists(vsDimName,vsSubName) = 1);
      ViewSubsetAssign(pCubeName, vsViewname, vsDimName, vsSubName);
      IF(pDebug = 1);
        LogoutPut('INFO','Subset assigned to View. ViewName '|vsViewName | ' dimname: ' | vsDimname | ' subset name:' |vsSubName);
      ENDIF;
   ELSE;
      vMDX = '{TM1FILTERBYLEVEL( {TM1SUBSETALL( ['|vsDimName|'] )}, 0)}';
      SubSetCreateByMDX (vsSubName , vMDX) ;
      SubsetMDXSet( vsDimName, vsSubName, ''); 

      IF(pDebug = 1);
         LogoutPut('INFO','Subset created by n element MDX for View. ViewName '|vsViewName | ' dimname: ' | vsDimname | ' subset name:' |vsSubName);
      ENDIF;

      ViewSubsetAssign(pCubeName, vsViewname, vsDimName, vsSubName);
      IF(pDebug = 1);
         LogoutPut('INFO','Subset assigned to View. ViewName '|vsViewName | ' dimname: ' | vsDimname | ' subset name:' |vsSubName);
      ENDIF;
   ENDIF;
   ViewTitleDimensionSet(pCubeName,vsViewName, vsDimname);

   i = i+1;
END;

#ViewzeroOut 
ViewZeroOut (pCubeName, vsViewname);



#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****

# ViewDestroy
IF(ViewExists(pCubeName,vsViewName) = 1);
   ViewDestroy(pCubeName, vsViewname);
ENDIF;

i = 1;
WHILE (TABDIM (pCubeName,i) @<>''); 
   vsDimName = TABDIM (pCubeName,i);

   # Subset destroy
   SubsetDestroy( vsDimName, vsSubName);
   i = i+1;
END;


#endregion
