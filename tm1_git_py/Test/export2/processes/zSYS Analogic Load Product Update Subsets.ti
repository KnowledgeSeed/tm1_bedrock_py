#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2023.05.25
# Originator                         Ullmann Dávid
# Purpose                            Process to load a given product dimension's custom totals with components and the corresponding subsets
# Change Date                           
# Change Request Reference    
# Change Made by                     
# =========================================================

#LogOutput('INFO', 'Subset and total creation started');

# declare custom total variables

nFirstDataCol        = 9;
nLastDataCol         = 18;
nIdCol               = 2;
sTotalPostfix        = ' Total';
sAllPostfix          = ' Naturalia';
sElementName_Source  = 'New';
sElementAlias_Source = 'Új';
sElementName_Target  = 'Terminated';
sElementAlias_Target = 'Felmondott';

sAttributeName_NewList = 'NewList';
sAttributeName_TerminatedList = 'TerminatedList';
sAttributeName_UIFlag = 'UI Flag';
sAttributeName_Order = 'Order';
sAttributeName_SubsetName = 'SubsetName';
sAttributeName_Caption = 'Caption';

# initialize group name variables
# in case of new groups, initialize it here, expand its variable in data

sGroupName1  = '';
sGroupName2  = '';
sGroupName3  = '';
sGroupName4  = '';
sGroupName5  = '';
sGroupName6  = '';
sGroupName7  = '';
sGroupName8  = '';
sGroupName9  = '';
sGroupName10 = '';


# csv variables

nNumberOfGroups = nLastDataCol - nFirstDataCol + 1;
pFileLocation = CellGetS('zSYS Maintenance Parameter', 'Inbound Data Directory Path', 'S Type');
sFile = pFileLocation | pFileName;

sColumnDelimiter = If ( pColumnDelimiter @= '' , ';' , pColumnDelimiter );
sDecimalSeparator = If ( pDecimalSeparator @= '' , '.' , pDecimalSeparator );
sThousandSeparator = pThousandSeparator;
sQuoteChar = If ( pQuoteChar @= '' , '"' , pQuoteChar );
sCharacterSet = If ( pCharacterSet @= '' , 'TM1CS_UTF8' , pCharacterSet );
nHeaderRow = If ( pHeaderRow @= '' , 0 , Numbr ( pHeaderRow ) );

# define and set CSV as data source

DataSourceType = 'CHARACTERDELIMITED';
DataSourceNameForServer = sFile;
DataSourceNameForClient = sFile;
DatasourceASCIIHeaderRecords = nHeaderRow;
DatasourceASCIIQuoteCharacter = sQuoteChar;
DataSourceASCIIDelimiter = sColumnDelimiter;
SetInputCharacterSet ( sCharacterSet );
nRowIndex = 0;
nMetaRowIndex = 0;

#LogOutput('INFO', 'VIEW READY');

# reset UI flags

sSubsetName_Reset = 'Reset Temp';

sDimensionName_Subsets = '}Subsets_'|pDimensionName;
sMDX = '{['|sDimensionName_Subsets|'].Members}';
SubsetCreate(sDimensionName_Subsets, sSubsetName_Reset, 1);
SubsetMDXSet(sDimensionName_Subsets, sSubsetName_Reset, sMDX);
SubsetMDXSet(sDimensionName_Subsets, sSubsetName_Reset, '');
nElementIndex = 1;
nElementIndexMax = SubsetGetSize(sDimensionName_Subsets, sSubsetName_Reset);
while(nElementIndex <= nElementIndexMax);
  nCurrentElement = SubsetGetElementName(sDimensionName_Subsets, sSubsetName_Reset, nElementIndex);
  AttrPutN(0, sDimensionName_Subsets, nCurrentElement, sAttributeName_UIFlag);
  nElementIndex = nElementIndex + 1;
end;

sDimensionName_Category = 'Product Category';
#sMDX = '{['|sDimensionName_Category|'].Members}';
#SubsetCreate(sDimensionName_Category, sSubsetName_Reset, 1);
#SubsetMDXSet(sDimensionName_Category, sSubsetName_Reset, sMDX);
#SubsetMDXSet(sDimensionName_Category, sSubsetName_Reset, '');
#nElementIndex = 1;
#nElementIndexMax = SubsetGetSize(sDimensionName_Category, sSubsetName_Reset);
#while(nElementIndex <= nElementIndexMax);
#  nCurrentElement = SubsetGetElementName(sDimensionName_Category, sSubsetName_Reset, nElementIndex);
#  AttrPutN(0, sDimensionName_Category, nCurrentElement, sAttributeName_UIFlag);
#  nElementIndex = nElementIndex + 1;
#end;

#
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

nRowIndex = nRowIndex + 1;

if(nRowIndex = 1);
  
  # set groupname variables - in case of new groups, add it here
  
  sGroupName1  =  Expand('%v'| NumberToString(nFirstDataCol + 0) |'%');
  sGroupName2  =  Expand('%v'| NumberToString(nFirstDataCol + 1) |'%');
  sGroupName3  =  Expand('%v'| NumberToString(nFirstDataCol + 2) |'%');
  sGroupName4  =  Expand('%v'| NumberToString(nFirstDataCol + 3) |'%');
  sGroupName5  =  Expand('%v'| NumberToString(nFirstDataCol + 4) |'%');
  sGroupName6  =  Expand('%v'| NumberToString(nFirstDataCol + 5) |'%');
  sGroupName7  =  Expand('%v'| NumberToString(nFirstDataCol + 6) |'%');
  sGroupName8  =  Expand('%v'| NumberToString(nFirstDataCol + 7) |'%');
  sGroupName9  =  Expand('%v'| NumberToString(nFirstDataCol + 8) |'%');
  sGroupName10 =  Expand('%v'| NumberToString(nFirstDataCol + 9) |'%');
  
  # first row of source file: generate all totals, subsets, and additional elements (new, terminated)
  
  nGroupIndex = nFirstDataCol;
  while(nGroupIndex <= nLastDataCol);
    sCurrentGroupName = Expand('%v'| NumberToString(nGroupIndex) |'%');
    sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
    
    
    # generating empty total element, filling its attributes
    if(DimensionElementExists(pDimensionName, sCurrentTotalName) = 1);
      DimensionElementDeleteDirect(pDimensionName, sCurrentTotalName);
    endif;
    DimensionElementInsertDirect(pDimensionName, '', sCurrentTotalName, 'C');
    AttrPutS(sCurrentGroupName, pDimensionName, sCurrentTotalName, sAttributeName_SubsetName);
    AttrPutS(sCurrentGroupName, pDimensionName, sCurrentTotalName, sAttributeName_Caption);
    
    
    # creating subset if necessary, setting UI display flag
    if(HierarchySubsetExists(pDimensionName, pDimensionName, sCurrentGroupName) = 0);
      HierarchySubsetCreate(pDimensionName, pDimensionName, sCurrentGroupName);
    endif;
    CellPutN(1, '}ElementAttributes_'|sDimensionName_Subsets, sCurrentGroupName, sAttributeName_UIFlag);
    CellPutN(nGroupIndex - nFirstDataCol + 1, '}ElementAttributes_'|sDimensionName_Subsets, sCurrentGroupName, sAttributeName_Order);
    
    #creating group in group dimension for weights cube
    if(DimensionElementExists(sDimensionName_Category, sCurrentGroupName) = 0);
      DimensionElementInsertDirect(sDimensionName_Category, '', sCurrentGroupName, 'N');
    endif;
    
    # creating naturalia subset
    sCurrentGroupName_all = sCurrentGroupName | sAllPostfix;
    if(HierarchySubsetExists(pDimensionName, pDimensionName, sCurrentGroupName_all) = 0);
      HierarchySubsetCreate(pDimensionName, pDimensionName, sCurrentGroupName_all);
    endif;
    
    
    nGroupIndex = nGroupIndex + 1;
  end;
else;
  
  # for a product, start a loop for all groups
  sProductId = Expand('%v'| NumberToString(nIdCol) |'%');
  
  nGroupIndex = nFirstDataCol;
  while(nGroupIndex <= nLastDataCol);
    sCurrentGroupName = Expand('%sGroupName'| NumberToString(nGroupIndex - nFirstDataCol + 1) |'%');
    sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
    nProductInGroup = StringToNumber(Expand('%v'| NumberToString(nGroupIndex) |'%'));
    
    if(nProductInGroup = 1);
    
      # place product as child under maincategory parent total
      DimensionElementComponentAddDirect(pDimensionName, sCurrentTotalName, sProductId, 1);
    endif;
    
    nGroupIndex = nGroupIndex + 1;
  end;
endif;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****



# generate filtered, ordered subset of source and target products - collector subsets for product

nSubsetIndex = 1;

if(pDimensionName @= 'Source Product');
  while(nSubsetIndex <= nNumberOfGroups);
    sCurrentGroupName = Expand('%sGroupName'| NumberToString(nSubsetIndex) |'%');
    sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
    sMDX = '
    {
    UNION(
      {
      ORDER(
        {
        FILTER(
          {
          FILTER(
            {
            TM1FILTERBYLEVEL(
              {
              TM1DRILLDOWNMEMBER(
                {
                ['|pDimensionName|'].['|pDimensionName|'].['|sCurrentTotalName|']
                }, 
                ALL, 
                RECURSIVE)
              }, 
              0)
            },
            ['|pDimensionName|'].['|pDimensionName|'].[Actual Period BiggerThanZero] = 1)
          },
          ['|pDimensionName|'].['|pDimensionName|'].[Active] = 1)
        },
        ['|pDimensionName|'].[Migration Point], DESC)
      },
      {
      ORDER(
        {
        FILTER(
          {
          FILTER(
            {
            TM1FILTERBYLEVEL(
              {
              TM1DRILLDOWNMEMBER(
                {
                ['|pDimensionName|'].['|pDimensionName|'].['|sCurrentTotalName|']
                }, 
                ALL, 
                RECURSIVE)
              }, 
              0)
            },
            ['|pDimensionName|'].['|pDimensionName|'].[Actual Period BiggerThanZero] = 1)
          },
          ['|pDimensionName|'].['|pDimensionName|'].[Active] = 0)
        },
        ['|pDimensionName|'].[Migration Point], DESC)
      })
    }';
    
    HierarchySubsetMDXSet(pDimensionName, pDimensionName, sCurrentGroupName, sMDX);
    HierarchySubsetMDXSet(pDimensionName, pDimensionName, sCurrentGroupName, '');
    nSubsetIndex = nSubsetIndex + 1;
  end;
elseif(pDimensionName @= 'Target Product');
  while(nSubsetIndex <= nNumberOfGroups);
    sCurrentGroupName = Expand('%sGroupName'| NumberToString(nSubsetIndex) |'%');
    sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
    sMDX = '
    {
    ORDER(
      {
      FILTER(
        {
        TM1FILTERBYLEVEL(
          {
          TM1DRILLDOWNMEMBER(
            {
            ['|pDimensionName|'].['|pDimensionName|'].['|sCurrentTotalName|']
            }, 
            ALL, 
            RECURSIVE)
          }, 
          0)
        },
        ['|pDimensionName|'].['|pDimensionName|'].[Actual Period Active] = 1)
      },
      ['|pDimensionName|'].[Migration Point], DESC)
    }';
    
    HierarchySubsetMDXSet(pDimensionName, pDimensionName, sCurrentGroupName, sMDX);
    HierarchySubsetMDXSet(pDimensionName, pDimensionName, sCurrentGroupName, '');
    nSubsetIndex = nSubsetIndex + 1;
  end;
  
else; 
  # in case of 'Products' dimension - collect all elements under total  
  while(nSubsetIndex <= nNumberOfGroups);
    sCurrentGroupName = Expand('%sGroupName'| NumberToString(nSubsetIndex) |'%');
    sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
    sMDX = '
    {
    ORDER(
      {
      TM1FILTERBYLEVEL(
        {
        TM1DRILLDOWNMEMBER(
          {
          ['|pDimensionName|'].['|pDimensionName|'].['|sCurrentTotalName|']
          }, 
          ALL, 
          RECURSIVE)
        }, 
        0)
      },
      ['|pDimensionName|'].[Migration Point], DESC)
    }';
    
    HierarchySubsetMDXSet(pDimensionName, pDimensionName, sCurrentGroupName, sMDX);
    HierarchySubsetMDXSet(pDimensionName, pDimensionName, sCurrentGroupName, '');
    nSubsetIndex = nSubsetIndex + 1;
  end;
endif;



# deal with new and terminated - put them under totals and in subsets if necessary

nSubsetIndex = 1;

while(nSubsetIndex <= nNumberOfGroups);
  sCurrentGroupName = Expand('%sGroupName'| NumberToString(nSubsetIndex) |'%');
  sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
  
  DimensionElementComponentAddDirect(pDimensionName, sCurrentTotalName, sElementName_Source, 1);
  DimensionElementComponentAddDirect(pDimensionName, sCurrentTotalName, sElementName_Target, 1);
  
  if(pDimensionName @= 'Source Product');
    nNextPosition = HierarchySubsetGetSize(pDimensionName, pDimensionName, sCurrentGroupName) + 1;
    HierarchySubsetElementInsert(pDimensionName, pDimensionName, sCurrentGroupName, sElementName_Source, nNextPosition);
  elseif(pDimensionName @= 'Target Product');
    nNextPosition = HierarchySubsetGetSize(pDimensionName, pDimensionName, sCurrentGroupName) + 1;
    HierarchySubsetElementInsert(pDimensionName, pDimensionName, sCurrentGroupName, sElementName_Target, nNextPosition);
  endif;
  
  nSubsetIndex = nSubsetIndex + 1;
end;

# generate union all active elements subsets

nSubsetIndex = 1;

while(nSubsetIndex <= nNumberOfGroups);
  sCurrentGroupName = Expand('%sGroupName'| NumberToString(nSubsetIndex) |'%');
  sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
  
  sMDX = '
    {
    UNION(
      {
      ORDER(
        {
        FILTER(
          {
          TM1FILTERBYLEVEL(
            {
            TM1DRILLDOWNMEMBER(
              {
              ['|pDimensionName|'].['|pDimensionName|'].['|sCurrentTotalName|']
              }, 
              ALL, 
              RECURSIVE)
            }, 
            0)
          },
          ['|pDimensionName|'].['|pDimensionName|'].[Actual Period Active] = 1)
        },
        ['|pDimensionName|'].[Migration Point], DESC)
      },
      {
      ORDER(
        {
        FILTER(
          {
          FILTER(
            {
            TM1FILTERBYLEVEL(
              {
              TM1DRILLDOWNMEMBER(
                {
                ['|pDimensionName|'].['|pDimensionName|'].['|sCurrentTotalName|']
                }, 
                ALL, 
                RECURSIVE)
              }, 
              0)
            },
            ['|pDimensionName|'].['|pDimensionName|'].[Actual Period Active] = 0)
          },
          ['|pDimensionName|'].['|pDimensionName|'].[Actual Period BiggerThanZero] = 1)
        },
        ['|pDimensionName|'].[Migration Point], DESC)
      })
    }';
    
  #LogOutput('INFO', sMDX);  
  
  sCurrentGroupName = sCurrentGroupName | sAllPostfix;
  
  #LogOutput('INFO', sCurrentGroupName);
  HierarchySubsetMDXSet(pDimensionName, pDimensionName, sCurrentGroupName, sMDX);
  HierarchySubsetMDXSet(pDimensionName, pDimensionName, sCurrentGroupName, '');  
  
  # adding extra element: total at the first position
  HierarchySubsetElementInsert(pDimensionName, pDimensionName, sCurrentGroupName, sCurrentTotalName, 1);
  
  nSubsetIndex = nSubsetIndex + 1;
end;


# the end
#endregion
