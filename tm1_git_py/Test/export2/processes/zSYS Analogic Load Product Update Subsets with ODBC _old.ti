#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2023.05.25
# Originator                         Ullmann Dávid
# Purpose                            Process to load a given product dimension's custom totals with components and the corresponding subsets
# Change Date                           
# Change Request Reference    
# Change Made by                     
# =========================================================

#LogOutput('INFO', 'Subset and total creation started');

# declare custom total variables

nFirstDataCol        = 9;
nLastDataCol         = 18;
nIdCol               = 2;
sTotalPostfix        = ' Total';
sAllPostfix          = ' Naturalia';
sElementName_Source  = 'New';
sElementAlias_Source = 'Új';
sElementName_Target  = 'Terminated';
sElementAlias_Target = 'Felmondott';

sAttributeName_NewList = 'NewList';
sAttributeName_TerminatedList = 'TerminatedList';
sAttributeName_UIFlag = 'UI Flag';
sAttributeName_Order = 'Order';
sAttributeName_SubsetName = 'SubsetName';
sAttributeName_Caption = 'Caption';

# initialize group name variables
# in case of new groups, initialize it here, expand its variable in data

sGroupName1  = 'KTV Alaptermék';
sGroupName2  = 'Internet';
sGroupName3  = 'Telefon';
sGroupName4  = 'KTV kiegészítő';
sGroupName5  = 'Eszközbérlet';
sGroupName6  = 'DSL';
sGroupName7  = 'Nagyker';
sGroupName8  = 'Üzleti';
sGroupName9  = 'OTT';
sGroupName10 = 'Egyéb';

pVersion = 'Base';


# csv variables

nNumberOfGroups = nLastDataCol - nFirstDataCol + 1;

# was needed only for the CSV loading
#pFileLocation = CellGetS('zSYS Maintenance Parameter', 'Inbound Data Directory Path', 'S Type');
#sFile = pFileLocation | pFileName;
#
#sColumnDelimiter = If ( pColumnDelimiter @= '' , ';' , pColumnDelimiter );
#sDecimalSeparator = If ( pDecimalSeparator @= '' , '.' , pDecimalSeparator );
#sThousandSeparator = pThousandSeparator;
#sQuoteChar = If ( pQuoteChar @= '' , '"' , pQuoteChar );
#sCharacterSet = If ( pCharacterSet @= '' , 'TM1CS_UTF8' , pCharacterSet );
#nHeaderRow = If ( pHeaderRow @= '' , 0 , Numbr ( pHeaderRow ) );

# define and set CSV as data source

#DataSourceType = 'CHARACTERDELIMITED';
#DataSourceNameForServer = sFile;
#DataSourceNameForClient = sFile;
#DatasourceASCIIHeaderRecords = nHeaderRow;
#DatasourceASCIIQuoteCharacter = sQuoteChar;
#DataSourceASCIIDelimiter = sColumnDelimiter;
#SetInputCharacterSet ( sCharacterSet );
nRowIndex = 0;
nMetaRowIndex = 0;

#LogOutput('INFO', 'VIEW READY');

# reset UI flags

sSubsetName_Reset = 'Reset Temp';

sDimensionName_Subsets = '}Subsets_'|pDimensionName;
sMDX = '{['|sDimensionName_Subsets|'].Members}';
SubsetCreate(sDimensionName_Subsets, sSubsetName_Reset, 1);
SubsetMDXSet(sDimensionName_Subsets, sSubsetName_Reset, sMDX);
SubsetMDXSet(sDimensionName_Subsets, sSubsetName_Reset, '');
nElementIndex = 1;
nElementIndexMax = SubsetGetSize(sDimensionName_Subsets, sSubsetName_Reset);
while(nElementIndex <= nElementIndexMax);
  nCurrentElement = SubsetGetElementName(sDimensionName_Subsets, sSubsetName_Reset, nElementIndex);
  AttrPutN(0, sDimensionName_Subsets, nCurrentElement, sAttributeName_UIFlag);
  nElementIndex = nElementIndex + 1;
end;

sDimensionName_Category = 'Product Category';
#sMDX = '{['|sDimensionName_Category|'].Members}';
#SubsetCreate(sDimensionName_Category, sSubsetName_Reset, 1);
#SubsetMDXSet(sDimensionName_Category, sSubsetName_Reset, sMDX);
#SubsetMDXSet(sDimensionName_Category, sSubsetName_Reset, '');
#nElementIndex = 1;
#nElementIndexMax = SubsetGetSize(sDimensionName_Category, sSubsetName_Reset);
#while(nElementIndex <= nElementIndexMax);
#  nCurrentElement = SubsetGetElementName(sDimensionName_Category, sSubsetName_Reset, nElementIndex);
#  AttrPutN(0, sDimensionName_Category, nCurrentElement, sAttributeName_UIFlag);
#  nElementIndex = nElementIndex + 1;
#end;



# placing attribute creation in prolog instead of data - 2023.07.20 - ODBC change - U.D.

# generate all totals, subsets, and additional elements (new, terminated)
  
  nGroupIndex = nFirstDataCol;
  while(nGroupIndex <= nLastDataCol);
    sCurrentGroupName = Expand('%sGroupName'| NumberToString(nGroupIndex - nFirstDataCol + 1) |'%');
    sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
    
    
    # generating empty total element, filling its attributes
    if(DimensionElementExists(pDimensionName, sCurrentTotalName) = 1);
      DimensionElementDeleteDirect(pDimensionName, sCurrentTotalName);
    endif;
    DimensionElementInsertDirect(pDimensionName, '', sCurrentTotalName, 'C');
    AttrPutS(sCurrentGroupName, pDimensionName, sCurrentTotalName, sAttributeName_SubsetName);
    AttrPutS(sCurrentGroupName, pDimensionName, sCurrentTotalName, sAttributeName_Caption);
    
    
    # creating subset if necessary, setting UI display flag
    if(HierarchySubsetExists(pDimensionName, pDimensionName, sCurrentGroupName) = 0);
      HierarchySubsetCreate(pDimensionName, pDimensionName, sCurrentGroupName);
    endif;
    CellPutN(1, '}ElementAttributes_'|sDimensionName_Subsets, sCurrentGroupName, sAttributeName_UIFlag);
    CellPutN(nGroupIndex - nFirstDataCol + 1, '}ElementAttributes_'|sDimensionName_Subsets, sCurrentGroupName, sAttributeName_Order);
    
    #creating group in group dimension for weights cube
    if(DimensionElementExists(sDimensionName_Category, sCurrentGroupName) = 0);
      DimensionElementInsertDirect(sDimensionName_Category, '', sCurrentGroupName, 'N');
    endif;
    DimensionElementComponentAddDirect(sDimensionName_Category, 'Total', sCurrentGroupName, 1);
    
    # creating naturalia subset
    sCurrentGroupName_all = sCurrentGroupName | sAllPostfix;
    if(HierarchySubsetExists(pDimensionName, pDimensionName, sCurrentGroupName_all) = 0);
      HierarchySubsetCreate(pDimensionName, pDimensionName, sCurrentGroupName_all);
    endif;
    
    if(DimensionElementExists('}ElementAttributes_'|pDimensionName, sCurrentGroupName) = 0);
      AttrInsert(pDimensionName, '', sCurrentGroupName, 'N');
    endif;
    
    nGroupIndex = nGroupIndex + 1;
  end;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

nRowIndex = nRowIndex + 1;
  
# for a product, start a loop for all groups
sProductId = Expand('%v'| NumberToString(nIdCol) |'%');
sProductId = NumberToString(StringToNumberEx(sProductId, '.', ''));

#nDeltaPlus = CellGetN('Subscription Plan', pVersion, 'All Period', 'Total', 'Total', 'All products', sProductId, 'Contracts total', 'Final Value');
#nDeltaMinus = CellGetN('Subscription Plan', pVersion, 'All Period', 'Total', 'Total', 'All products', sProductId, 'Contracts total decrease', 'Final Value');
#nDelta = nDeltaPlus + nDeltaMinus;

# check closing value for archive filter
nClosingValue = 0;
i = 1;
iMax = SubsetGetSize('Period', 'All Year C');
while(i <= iMax);
  nCurrentPeriod = SubsetGetElementName('Period', 'All Year C', i);
  nClosingValue = nClosingValue + CellGetN('Subscription Plan', pVersion, nCurrentPeriod, 'Total', 'Total', 'Total products', sProductId, 'Closing', 'Final Value');
  i = i + 1;
end;

nArchiveFlag = AttrN(pDimensionName, sProductId, 'Archive');

#if(sProductId @= '526' );
##  LogOutput('INFO', 'Closing:'|numbertostring(nClosingValue));
##  LogOutput('INFO', 'Archive:'|numbertostring(nArchiveFlag));
#endif;

if(nArchiveFlag = 0);
  
  
  
  
  
  if(nClosingValue = 0);
    
    # in case of closing = 0, make it archive if does not have any value
    DimensionElementComponentDeleteDirect(pDimensionName, 'Total products', sProductId);
    DimensionElementComponentAddDirect(pDimensionName, 'Total products archive', sProductId,1);
    AttrPutN(1, pDimensionName, sProductId, 'Archive');
  else;
    
    # add to maincategory and keep under product total if relevant
    nGroupIndex = nFirstDataCol;
    while(nGroupIndex <= nLastDataCol);
      sCurrentGroupName = Expand('%sGroupName'| NumberToString(nGroupIndex - nFirstDataCol + 1) |'%');
      sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
      nProductInGroup = StringToNumber(Expand('%v'| NumberToString(nGroupIndex) |'%'));
      
      if(nProductInGroup = 1);
      
        # place product as child under maincategory parent total
        DimensionElementComponentAddDirect(pDimensionName, sCurrentTotalName, sProductId, 1);
      endif;
      
      AttrPutN(nProductInGroup, pDimensionName, sProductId, sCurrentGroupName);
      
      nGroupIndex = nGroupIndex + 1;
    end;
  endif;
endif;



#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
# generate filtered, ordered subset of source and target products - collector subsets for product

nSubsetIndex = 1;
IF( pDimensionName @= 'Source Product' );
	WHILE( nSubsetIndex <= nNumberOfGroups );
		sCurrentGroupName = Expand( '%sGroupName' | NumberToString( nSubsetIndex ) | '%' );
		sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
		sMDX = '{{ ORDER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) }}';
		IF( sCurrentGroupName @= 'Nagyker' );
			sMDX = '{{ FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") },{ FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") },{ FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") }}';
		ENDIF;
		HierarchySubsetMdxSet( pDimensionName, pDimensionName, sCurrentGroupName, sMDX );
		HierarchySubsetMdxSet( pDimensionName, pDimensionName, sCurrentGroupName, '' );
		nSubsetIndex = nSubsetIndex + 1;
	END;
ELSEIF( pDimensionName @= 'Target Product' );
	WHILE( nSubsetIndex <= nNumberOfGroups );
		sCurrentGroupName = Expand( '%sGroupName' | NumberToString( nSubsetIndex ) | '%' );
		sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
		sMDX = '{{ ORDER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) }}';
		IF( sCurrentGroupName @= 'Nagyker' );
			sMDX = '{{ FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") },{ FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") },{ FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") }}';
		ENDIF;
		HierarchySubsetMdxSet( pDimensionName, pDimensionName, sCurrentGroupName, sMDX );
		HierarchySubsetMdxSet( pDimensionName, pDimensionName, sCurrentGroupName, '' );
		nSubsetIndex = nSubsetIndex + 1;
	END;
ELSE;

	# in case of 'Products' dimension - collect all elements under total

	WHILE( nSubsetIndex <= nNumberOfGroups );
		sCurrentGroupName = Expand( '%sGroupName' | NumberToString( nSubsetIndex ) | '%' );
		sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
		sMDX = '{{ ORDER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) }}';
		IF( sCurrentGroupName @= 'Nagyker' );
			sMDX = '{{ FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") },{ FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") },{ FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") }}';
		ENDIF;
		HierarchySubsetMdxSet( pDimensionName, pDimensionName, sCurrentGroupName, sMDX );
		HierarchySubsetMdxSet( pDimensionName, pDimensionName, sCurrentGroupName, '' );
		nSubsetIndex = nSubsetIndex + 1;
	END;
ENDIF;

# deal with new and terminated - put them under totals and in subsets if necessary

nSubsetIndex = 1;
WHILE( nSubsetIndex <= nNumberOfGroups );
	sCurrentGroupName = Expand( '%sGroupName' | NumberToString( nSubsetIndex ) | '%' );
	sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
	DimensionElementComponentAddDirect( pDimensionName, sCurrentTotalName, sElementName_Source, 
		1 );
	DimensionElementComponentAddDirect( pDimensionName, sCurrentTotalName, sElementName_Target, 
		1 );
	IF( pDimensionName @= 'Source Product' );
		nNextPosition = HierarchySubsetGetSize( pDimensionName, pDimensionName, sCurrentGroupName ) + 1;
		HierarchySubsetElementInsert( pDimensionName, pDimensionName, sCurrentGroupName, sElementName_Source, 
			nNextPosition );
	ELSEIF( pDimensionName @= 'Target Product' );
		nNextPosition = HierarchySubsetGetSize( pDimensionName, pDimensionName, sCurrentGroupName ) + 1;
		HierarchySubsetElementInsert( pDimensionName, pDimensionName, sCurrentGroupName, sElementName_Target, 
			nNextPosition );
	ENDIF;
	nSubsetIndex = nSubsetIndex + 1;
END;

# put new and terminated under XP totals

DimensionElementComponentAddDirect( pDimensionName, 'TV', sElementName_Source, 1 );
DimensionElementComponentAddDirect( pDimensionName, 'TV', sElementName_Target, 1 );
DimensionElementComponentAddDirect( pDimensionName, 'NET', sElementName_Source, 1 );
DimensionElementComponentAddDirect( pDimensionName, 'NET', sElementName_Target, 1 );
DimensionElementComponentAddDirect( pDimensionName, 'TEL', sElementName_Source, 1 );
DimensionElementComponentAddDirect( pDimensionName, 'TEL', sElementName_Target, 1 );

# generate union all active elements subsets

nSubsetIndex = 1;
WHILE( nSubsetIndex <= nNumberOfGroups );
	sCurrentGroupName = Expand( '%sGroupName' | NumberToString( nSubsetIndex ) | '%' );
	sCurrentTotalName = sCurrentGroupName | sTotalPostfix;
	sMDX = '{{ ORDER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Lakossági") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) },{ ORDER( { FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Üzleti") }, [' | pDimensionName | '].[Migration Point], DESC) }}';
	IF( sCurrentGroupName @= 'Nagyker' );
		sMDX = '{{ FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") },{ FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") },{ FILTER( { FILTER( { FILTER( { TM1FILTERBYLEVEL( { TM1DRILLDOWNMEMBER( { [' | pDimensionName | '].[' | pDimensionName | '].[' | sCurrentTotalName | '] }, ALL, RECURSIVE) }, 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Active] = 0) }, [' | pDimensionName | '].[' | pDimensionName | '].[Archive] = 1) }, [' | pDimensionName | '].[' | pDimensionName | '].[Business Unit] = "Nagyker") }}';
	ENDIF;
	sCurrentGroupName = sCurrentGroupName | sAllPostfix;
	HierarchySubsetMdxSet( pDimensionName, pDimensionName, sCurrentGroupName, sMDX );
	HierarchySubsetMdxSet( pDimensionName, pDimensionName, sCurrentGroupName, '' );

	# adding extra element: total at the first position

	HierarchySubsetElementInsert( pDimensionName, pDimensionName, sCurrentGroupName, sCurrentTotalName, 
		1 );
	nSubsetIndex = nSubsetIndex + 1;
END;

# the end
# Módos Dávid 09 25
# ADSL Telefon (121) adathiba javíátsa

# DSL Total elem alól törölni
# Az attributum kinullázása
# Subsetből törlés
IF( DimensionElementExists(pDimensionName, '121') = 1 );
elementComponentBoolean = ElementIsComponent(pDimensionName, pDimensionName, '121', 'DSL Total');

IF( elementComponentBoolean = 1);
  DimensionElementComponentDelete( pDimensionName, 'DSL Total', '121' );
ENDIF;
sCubeName = '}ElementAttributes_' | pDimensionName;
CellPutN(0, sCubeName, '15', 'DSL');

# törlés subsetekből
Index = SubsetElementGetIndex(pDimensionName, 'DSL', '121', 1);
IF( Index <> 0);
SubsetElementDelete(pDimensionName, 'DSL',Index);
ENDIF;
Index = SubsetElementGetIndex(pDimensionName, 'DSL All Active', '121', 1);
IF( Index <> 0);
SubsetElementDelete(pDimensionName, 'DSL All Active',Index);
ENDIF;
Index = SubsetElementGetIndex(pDimensionName, 'DSL Naturalia', '121', 1);
IF( Index <> 0);
SubsetElementDelete(pDimensionName, 'DSL Naturalia',Index);
ENDIF;



ENDIF;












#endregion
