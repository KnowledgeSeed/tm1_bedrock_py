#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

#Botond 05.21

sDimensionName_Period = 'Period';
sDimensionName_Version = 'Version';
nLedgerCol = 1;

#sFileName = '2024_08_17_11_51_54_individualCosts_Base_admin.csv';
#pFileName = sFileName;


sColumnDelimiter = ',';
sDecimalSeparator = '.';
sThousandSeparator = ' ';
sQuoteChar = '"';
sCharacterSet = 'TM1CS_UTF8';

# megadja hol van az első adat
nHeaderRow = 0;
nFirstDataCol= 2;
nLastDataCol= 43;
pVersion = pVersion;
nHeaderRowIndex = 1;
i = 1;

sActualPeriod = CellGetS('zSYS Maintenance Parameter', 'ActualMonth','S Type');

# define and set CSV as data source
pFileLocation = CellGetS('zSYS Maintenance Parameter', 'Import Data Directory Path', 'S Type');
sFile = pFileLocation | pFileName;

DataSourceType = 'CHARACTERDELIMITED';
DataSourceNameForServer = sFile;
DataSourceNameForClient = sFile;
DatasourceASCIIHeaderRecords = nHeaderRow;
DatasourceASCIIQuoteCharacter = sQuoteChar;
DataSourceASCIIDelimiter = sColumnDelimiter;
SetInputCharacterSet ( sCharacterSet );






#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
IF(i = 1 % i = 2 %  i = 3 % i = 4);
  i = i + 1;
  itemskip;
ENDIF;


  sCol1  =  Expand('%v'| NumberToString(nFirstDataCol + 0) |'%');
  sCol2  =  Expand('%v'| NumberToString(nFirstDataCol + 1) |'%');
  sCol3  =  Expand('%v'| NumberToString(nFirstDataCol + 2) |'%');
  sCol4  =  Expand('%v'| NumberToString(nFirstDataCol + 3) |'%');
  sCol5  =  Expand('%v'| NumberToString(nFirstDataCol + 4) |'%');
  sCol6  =  Expand('%v'| NumberToString(nFirstDataCol + 5) |'%');
  sCol7  =  Expand('%v'| NumberToString(nFirstDataCol + 6) |'%');
  sCol8  =  Expand('%v'| NumberToString(nFirstDataCol + 7) |'%');
  sCol9  =  Expand('%v'| NumberToString(nFirstDataCol + 8) |'%');
  sCol10 =  Expand('%v'| NumberToString(nFirstDataCol + 9) |'%');
  sCol11 =  Expand('%v'| NumberToString(nFirstDataCol + 10) |'%');
  sCol12 =  Expand('%v'| NumberToString(nFirstDataCol + 11) |'%');
  sCol13 =  Expand('%v'| NumberToString(nFirstDataCol + 12) |'%');
  sCol14 =  Expand('%v'| NumberToString(nFirstDataCol + 13) |'%');
  sCol15 =  Expand('%v'| NumberToString(nFirstDataCol + 14) |'%');
  sCol16 =  Expand('%v'| NumberToString(nFirstDataCol + 15) |'%');
  sCol17 =  Expand('%v'| NumberToString(nFirstDataCol + 16) |'%');
  sCol18 =  Expand('%v'| NumberToString(nFirstDataCol + 17) |'%');
  sCol19 =  Expand('%v'| NumberToString(nFirstDataCol + 18) |'%');
  sCol20 =  Expand('%v'| NumberToString(nFirstDataCol + 19) |'%');
  sCol21 =  Expand('%v'| NumberToString(nFirstDataCol + 20) |'%');
  sCol22 =  Expand('%v'| NumberToString(nFirstDataCol + 21) |'%');
  sCol23 =  Expand('%v'| NumberToString(nFirstDataCol + 22) |'%');
  sCol24 =  Expand('%v'| NumberToString(nFirstDataCol + 23) |'%');
  sCol25 =  Expand('%v'| NumberToString(nFirstDataCol + 24) |'%');
  sCol26 =  Expand('%v'| NumberToString(nFirstDataCol + 25) |'%');
  sCol27 =  Expand('%v'| NumberToString(nFirstDataCol + 26) |'%');
  sCol28 =  Expand('%v'| NumberToString(nFirstDataCol + 27) |'%');
  sCol29 =  Expand('%v'| NumberToString(nFirstDataCol + 28) |'%');
  sCol30 =  Expand('%v'| NumberToString(nFirstDataCol + 29) |'%');
  sCol31 =  Expand('%v'| NumberToString(nFirstDataCol + 30) |'%');
  sCol32 =  Expand('%v'| NumberToString(nFirstDataCol + 31) |'%');
  sCol33 =  Expand('%v'| NumberToString(nFirstDataCol + 32) |'%');
  sCol34 =  Expand('%v'| NumberToString(nFirstDataCol + 33) |'%');
  sCol35 =  Expand('%v'| NumberToString(nFirstDataCol + 34) |'%');
  sCol36 =  Expand('%v'| NumberToString(nFirstDataCol + 35) |'%');
  sCol37 =  Expand('%v'| NumberToString(nFirstDataCol + 36) |'%');
  sCol38 =  Expand('%v'| NumberToString(nFirstDataCol + 37) |'%');
  sCol39 =  Expand('%v'| NumberToString(nFirstDataCol + 38) |'%');
  sCol40 =  Expand('%v'| NumberToString(nFirstDataCol + 39) |'%');
  sCol41 =  Expand('%v'| NumberToString(nFirstDataCol + 40) |'%');
  sCol42 =  Expand('%v'| NumberToString(nFirstDataCol + 41) |'%');
  

sMode = 1;
nColIndex = 1;
#sEditable = CellGetS('}ElementAttributes_Individual Cost Ledger', sLedger, 'Calculations And Logic');
#IF( sEditable @= 'input' );
sLedger =  Expand('%v'| NumberToString(nLedgerCol) |'%');
sCapexTetel = CellGetS('}ElementAttributes_Balance Sheet Planning Ledger', sLedger, 'Capex tetel');
IF(sCapexTetel @= '1');
  Itemskip;
ENDIF;

WHILE( nColIndex <= nlastdatacol);


# kivételek
 IF( nColIndex < 16 %  nColIndex = 28 );
    nColIndex = nColIndex + 1;
  ENDIF;  
  
  # aktuális év inputja
  IF( nColIndex > 15 & nColIndex < 28 );
    # 27-es index a subsetben 202401
    
    nPeriodIndex = nColIndex - 1;
    sExcelPeriodSubset = 'ActualPeriod';
    sInputPeriod = HierarchySubsetGetElementName('Period', 'Period', sExcelPeriodSubset, nPeriodIndex);
    
    sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
    nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
    nCurrentValue = RoundP(nCurrentValue,0);
    sCurrentValue = NumberToString(nCurrentValue);
    
    # csak ha benne van az input PEriod-ban
    sPeriodSubsetName = 'Planning Period';
    IF ( SubsetElementExists('Period', sPeriodSubsetName, sInputPeriod) = 1); 
    
    ExecuteProcess('zSYS Analogic UI Balance Sheet Planning Input',
     'pMode', sMode,
     'pLedger', sLedger,
     'pValue', sCurrentValue,
     'pVersion', pVersion,
     'pPeriod', sInputPeriod,
     'pUser', pUser
    );
    
    ENDIF;
      
      nColIndex = nColIndex + 1;
  ENDIF; 
  
  # többi input
  IF( nColIndex > 28);
  # 28-as index a subsetben 202501
  nPeriodIndex = nColIndex - 1;
  sExcelPeriodSubset = 'ActualPeriod';
  sInputPeriod = HierarchySubsetGetElementName('Period', 'Period', sExcelPeriodSubset, nPeriodIndex);
  
  sCurrentValue = Expand('%v'| NumberToString(nColIndex) |'%');
  nCurrentValue = StringToNumberEx(sCurrentValue, sDecimalSeparator, sThousandSeparator);
  nCurrentValue = RoundP(nCurrentValue,0);
  sCurrentValue = NumberToString(nCurrentValue);
  ExecuteProcess('zSYS Analogic UI Balance Sheet Planning Input',
   'pMode', sMode,
   'pLedger', sLedger,
   'pValue', sCurrentValue,
   'pVersion', pVersion,
   'pPeriod', sInputPeriod,
   'pUser', pUser
  );
    
    nColIndex = nColIndex + 1;
  ENDIF; 
  
# while  
END;

# sEditable
#ENDIF;

i = i+1;
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
sToday = Today(1);
CellPutS(sToday, '}ElementAttributes_Version', pVersion, 'Last Updated');
CellPutS(pUser, '}ElementAttributes_Version', pVersion, 'Last Updated By');
#endregion
