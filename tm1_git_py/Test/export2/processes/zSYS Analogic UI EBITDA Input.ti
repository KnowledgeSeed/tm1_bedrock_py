#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

#Antal Botond 05.11

#pMode
#1: one month
#2: more month
#3: Growth rate
#4: CAGR 1 év/ 6: CAGR 6 hónap
#5: Inflation
#6: CAGR 6 hónap

nInputValue = stringToNumber(pValue);
sOtherCostMeasure = 'Value';

sAllCTimeSubset = 'All Year C';
sAllNTimeSubset = 'Actual Period N level';
sPeriodDim = 'Period';

#1: one value
# sima hónap
# éves
IF(pMode = 1);
  # sima hónap
  IF( Long(pPeriod) = 6);
    CellPutN(nInputValue, 'EBITDA', pVersion, pPeriod, pLedger, sOtherCostMeasure);
  ENDIF;
  
  # éves
  IF( Long(pPeriod) = 4);
    nInputValueHavi = nInputValue\12;
    i=1;
    WHILE( i<=12);
      sActualPeriod = pPeriod | numberToString(i);
      IF( i<10);
        sActualPeriod = pPeriod | '0' | numberToString(i);
      ENDIF;
      CellPutN(nInputValueHavi, 'EBITDA', pVersion, sActualPeriod, pLedger, sOtherCostMeasure);
      i=i+1;
    END;
  ENDIF;
  
#1: one value end
ENDIF;

#2: more month
# sima hónap
# éves
IF(pMode = 2);
  # sima hónap
  IF( Long(pPeriod) = 6);
    sPeriodStartMonth = pPeriod;
    nMaxPlanningPeriodSubsetLen = SubsetGetSize(sPeriodDim, sAllNTimeSubset);
    i = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, sPeriodStartMonth);
    While(i <= nMaxPlanningPeriodSubsetLen);
      sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);
      CellPutN(nInputValue, 'EBITDA', pVersion, sInputPeriod, pLedger, sOtherCostMeasure);
      i = i+1;
    END;
  ENDIF;
  
  # éves
  IF( Long(pPeriod) = 4);
    nInputValueHavi = nInputValue\12;
    sPeriodStartMonth = pPeriod | '01';
    nMaxPlanningPeriodSubsetLen = SubsetGetSize(sPeriodDim, sAllNTimeSubset);
    i = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, sPeriodStartMonth);
    While(i <= nMaxPlanningPeriodSubsetLen);
      sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);
      CellPutN(nInputValueHavi, 'EBITDA', pVersion, sInputPeriod, pLedger, sOtherCostMeasure);
      i = i+1;
    END;
  
  ENDIF;

##2: more month
ENDIF;

#3: Growth rate (megadott érték alapján)
# vesszük az Y0_12-t és az adott növekedési rátával feltöltjük
#Botond 09.02
IF( pMode = 3);
  
  # 202401
  sPeriodStartMonth = CellGetS('zSYS Maintenance Parameter', 'ActualMonth', 'S Type');
  
  nMaxPlanningPeriodSubsetLen = SubsetGetSize(sPeriodDim, sAllNTimeSubset);
  
  sLastMonth = attrs(sPeriodDim, sPeriodStartMonth, 'PREV_1M');
  
  i = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, sPeriodStartMonth);
    While(i <= nMaxPlanningPeriodSubsetLen);
      # adott hónap
      sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);
      nLastMonthValue = CellGetN('EBITDA', pVersion, sLastMonth , pLedger, sOtherCostMeasure);
      nGrowthRate = (stringToNumber(pValue)\100) + 1;
      nInputValue = nLastMonthValue * nGrowthRate;
      
      CellPutN(nInputValue, 'EBITDA', pVersion, sInputPeriod, pLedger, sOtherCostMeasure);
      i = i+1;
    END;
ENDIF;

#4: CAGR 1 év
#Botond 09.02
IF(pMode = 4);

sPeriodStartMonth = CellGetS('zSYS Maintenance Parameter', 'ActualMonth', 'S Type');

sLastMonth = attrs(sPeriodDim, sPeriodStartMonth, 'PREV_1M');
nLastMonthIndex = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, sLastMonth);
nStartingMonthIndex = nLastMonthIndex - 12;
sStartingMonth = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, nStartingMonthIndex);

nLastMonthValue = CellGetN('EBITDA', pVersion, sLastMonth, pLedger, sOtherCostMeasure);
nStartingMonthValue = CellGetN('EBITDA', pVersion, sStartingMonth, pLedger, sOtherCostMeasure);

nCAGR = (nLastMonthValue/nStartingMonthValue);

i = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, sPeriodStartMonth);
ActualPeriod = SubsetGetSize('period','Actual Period N level');
WHILE(i <= ActualPeriod);
  sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);
  nInputValue = nLastMonthValue * nCAGR;
  
  CellPutN(nInputValue, 'EBITDA', pVersion, sInputPeriod, pLedger, sOtherCostMeasure);
  i = i+1;
  
END;

ENDIF;

#6 CAGR 6 hónap
#Botond 09.02
IF(pMode = 6);

sPeriodStartMonth = CellGetS('zSYS Maintenance Parameter', 'ActualMonth', 'S Type');

sLastMonth = attrs(sPeriodDim, sPeriodStartMonth, 'PREV_1M');
nLastMonthIndex = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, sLastMonth);
nStartingMonthIndex = nLastMonthIndex - 6;
sStartingMonth = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, nStartingMonthIndex);

nLastMonthValue = CellGetN('EBITDA', pVersion, sLastMonth, pLedger, sOtherCostMeasure);
nStartingMonthValue = CellGetN('EBITDA', pVersion, sStartingMonth, pLedger, sOtherCostMeasure);

nCAGR = (nLastMonthValue/nStartingMonthValue);

i = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, sPeriodStartMonth);
ActualPeriod = SubsetGetSize('period','Actual Period N level');
WHILE(i <= ActualPeriod);
  sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);
  nInputValue = nLastMonthValue * nCAGR;
  
  CellPutN(nInputValue, 'EBITDA', pVersion, sInputPeriod, pLedger, sOtherCostMeasure);
  i = i+1;
  
END;

ENDIF;

#5: inflation (megadott érték alapján)

#Botond 09.05


IF( pMode = 5);
  
  sPeriodStartMonth = CellGetS('zSYS Maintenance Parameter', 'ActualMonth', 'S Type');
  
  nMaxPlanningPeriodSubsetLen = SubsetGetSize(sPeriodDim, sAllNTimeSubset);
  
  sLastMonth = attrs(sPeriodDim, sPeriodStartMonth, 'PREV_1M');
  nLastMonthValue = CellGetN('EBITDA', pVersion, sLastMonth, pLedger, sOtherCostMeasure);
  
  nCurrentYear = stringToNumber(DELET(sPeriodStartMonth,5,2));
  sCurrentYear = numberToString(nCurrentYear);
  
  i = SubsetElementGetIndex(sPeriodDim, sAllNTimeSubset, sPeriodStartMonth);
    While(i <= nMaxPlanningPeriodSubsetLen);
      # adott hónap
      sInputPeriod = SubsetGetElementName(sPeriodDim, sAllNTimeSubset, i);
      nInputYear = stringToNumber(DELET(sInputPeriod,5,2));
      
      IF( DELET(sInputPeriod,1,4)@= '01' &  (nCurrentYear < nInputYear));
        
        nCurrentYear = nCurrentYear + 1;
        sCurrentYear = numberToString(nCurrentYear);
        
        sLastMonth = attrs(sPeriodDim, sInputPeriod, 'PREV_1M');
        nLastMonthValue = CellGetN('EBITDA', pVersion, sLastMonth, pLedger, sOtherCostMeasure);
        
      ENDIF;

      nInflacio = CellGetN('Planning Driver', pVersion, sCurrentYear, 'Inflation', 'N Type');
      
      nGrowthRate = nInflacio + 1;
      
      nInputValue = nLastMonthValue * nGrowthRate;
      
      CellPutN(nInputValue, 'EBITDA', pVersion, sInputPeriod, pLedger, sOtherCostMeasure);
      i = i+1;
    END;
ENDIF;





#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****

#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
