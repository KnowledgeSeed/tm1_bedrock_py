#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2023.10.26
# Originator                         Ullmann Dávid
# Purpose                            Process to set the input movement assignment cube directly after writing to weights cube
# Change Date                           
# Change Request Reference    
# Change Made by                     
# =========================================================

# example parameters
# Base, 202401, Telefon, Switch off weight, Telefon III. (655), Value 0


# variable declaration

sCubeName_Movement    = 'Subscription Movement Assignment';
sCubeName_ForInput    = 'Subscription Movement Assignment for Input';
sCubeName_Weights     = 'Weight and Limit';

sDimensionName_Source = 'Source Product';
sDimensionName_Target = 'Target Product';
sDimensionName_Movement = 'Subscription Plan Movement';
sDimensionName_Measure = 'Subscription Movement Assignment Measure';
sDimensionName_Period = 'Period';
sDimensionName_Version = 'Version';

sAttributeName_Points = 'Migration Point';

sSubsetName_MainMovements = 'Main Movements';
sPostFix_New = 'New';
sPostFix_Terminated = 'Terminated';
sElementName_Movement = 'Closing';
sElementName_MovementN = 'New increase';
sElementName_MeasureMain = 'Stored';
sElementName_MeasureName = 'Movement Name';
sElementName_Product = 'Total Products';
sElementName_Version = pVersion;
sElementName_Period = 'All Period';

# see if we have to do anything at all, if signums are equal, do nothing, otherwise input cube 

nValue_sign = abs(sign(pValue));

sViewName = 'Movement Assignment Temp';
sFilter = sDimensionName_Source | ' ¦ '| pProduct |' & ';
sFilter = sFilter |sDimensionName_Target | ' ¦ '| pProduct |' & ';
sFilter = sFilter |sDimensionName_Movement | ' ¦ '| sElementName_MovementN |' & ';
sFilter = sFilter |sDimensionName_Measure | ' ¦ '| sElementName_MeasureMain;

if(ViewExists(sCubeName_Movement, sViewName) = 0);
  ExecuteProcess('}bedrock.cube.view.create',
   'pLogOutput', 0,
   'pStrictErrorHandling', 0,
   'pCube', sCubeName_Movement,
   'pView', sViewName,
   'pFilter', sFilter,
   'pSuppressZero', 1,
   'pSuppressConsol', 1,
   'pSuppressRules', 0,
   'pSuppressConsolStrings', -1,
   'pDimDelim', '&',
   'pEleStartDelim', '¦',
   'pEleDelim', '+',
   'pTemp',1,
   'pSubN', 0
  );
endif;

if(pLineitem @= 'Switch off weight');
  sMDX = '{['|sDimensionName_Target|'].['|sDimensionName_Target|'].Members}';
  SubsetMDXSet(sDimensionName_Target, sViewName, sMDX);
  SubsetMDXSet(sDimensionName_Target, sViewName, '');
else;
  sMDX = '{['|sDimensionName_Source|'].['|sDimensionName_Source|'].Members}';
  SubsetMDXSet(sDimensionName_Source, sViewName, sMDX);
  SubsetMDXSet(sDimensionName_Source, sViewName, '');
endif;

sMDX = '{['|sDimensionName_Movement|'].['|sDimensionName_Movement|'].Members}';
SubsetMDXSet(sDimensionName_Movement, sViewName, sMDX);
SubsetMDXSet(sDimensionName_Movement, sViewName, '');

DataSourceType          = 'VIEW';
DatasourceNameForServer = sCubeName_Movement;
DatasourceNameForClient = sCubeName_Movement;
DatasourceCubeView      = sViewName;
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

CellPutN(nValue_sign, sCubeName_ForInput, pVersion, pPeriod, vSourceProduct, vTargetProduct, vSubscriptionPlanMovement, vSubscriptionMovementAssignmentMeasure);
#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
