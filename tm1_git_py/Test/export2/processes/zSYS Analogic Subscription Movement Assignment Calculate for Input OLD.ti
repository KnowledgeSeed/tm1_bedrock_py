#region Prolog
#****Begin: Generated Statements***
#****End: Generated Statements****

# =========================================================
# Original Date Created              2023.10.21
# Originator                         Ullmann Dávid
# Purpose                            Process to calculate all movement assignment flags in the helper cube for input
# Change Date                           
# Change Request Reference    
# Change Made by                     
# =========================================================

pVersion = 'Base';

# variable declaration

sCubeName_Movement    = 'Subscription Movement Assignment';
sCubeName_ForInput    = 'Subscription Movement Assignment for Input';

sDimensionName_Source = 'Source Product';
sDimensionName_Target = 'Target Product';
sDimensionName_Movement = 'Subscription Plan Movement';
sDimensionName_Measure = 'Subscription Movement Assignment Measure';
sDimensionName_Period = 'Period';
sDimensionName_Version = 'Version';

sAttributeName_Points = 'Migration Point';

sSubsetName_MainMovements = 'Main Movements';
sPostFix_New = 'New';
sPostFix_Terminated = 'Terminated';
sElementName_Movement = 'Closing';
sElementName_MovementN = 'New increase';
sElementName_MeasureMain = 'Stored';
sElementName_MeasureName = 'Movement Name';
sElementName_Product = 'Total Products';
sElementName_Version = pVersion;
sElementName_Period = 'All Period';

# quitting if flag was set to 0

if(pRun = 0);
  ProcessQuit;
endif;

sActualMonth = CellGetS('zSYS Maintenance Parameter', 'ActualMonth', 'S Type');

# creating source view

sViewName = 'Movement Assignment Temp';
sFilter = sDimensionName_Source | ' ¦ '| sElementName_Product |' & ';
sFilter = sFilter |sDimensionName_Target | ' ¦ '| sElementName_Product |' & ';
sFilter = sFilter |sDimensionName_Movement | ' ¦ '| sElementName_MovementN |' & ';
sFilter = sFilter |sDimensionName_Measure | ' ¦ '| sElementName_MeasureMain;

ExecuteProcess('}bedrock.cube.view.create',
   'pLogOutput', 0,
   'pStrictErrorHandling', 0,
   'pCube', sCubeName_Movement,
   'pView', sViewName,
   'pFilter', sFilter,
   'pSuppressZero', 1,
   'pSuppressConsol', 1,
   'pSuppressRules', 0,
   'pSuppressConsolStrings', -1,
   'pDimDelim', '&',
   'pEleStartDelim', '¦',
   'pEleDelim', '+',
   'pTemp',1,
   'pSubN', 0
  );
  
  
  
# set MDXs to the source view filter subsets

sMDX = '{['|sDimensionName_Source|'].['|sDimensionName_Source|'].Members}';
SubsetMDXSet(sDimensionName_Source, sViewName, sMDX);
SubsetMDXSet(sDimensionName_Source, sViewName, '');

sMDX = '{['|sDimensionName_Target|'].['|sDimensionName_Target|'].Members}';
SubsetMDXSet(sDimensionName_Target, sViewName, sMDX);
SubsetMDXSet(sDimensionName_Target, sViewName, '');

sMDX = '{['|sDimensionName_Movement|'].['|sDimensionName_Movement|'].Members}';
SubsetMDXSet(sDimensionName_Movement, sViewName, sMDX);
SubsetMDXSet(sDimensionName_Movement, sViewName, '');


sSubsetName_Period = 'Period subset temporary';
sMDX = 
'{Filter( 
  {TM1FilterByLevel( {['|sDimensionName_Period|'].['|sDimensionName_Period|'].Members}, 0 )},
  InStr(['|sDimensionName_Period|'].['|sDimensionName_Period|'].CurrentMember.Name, "_Input") = 0 
)}';
SubsetCreate(sDimensionName_Period, sSubsetName_Period, 1);
SubsetMDXSet(sDimensionName_Period, sSubsetName_Period, sMDX);
SubsetMDXSet(sDimensionName_Period, sSubsetName_Period, '');
nPeriodMax = SubsetGetSize(sDimensionName_Period, sSubsetName_Period);

sSubsetName_Version = 'Version subset temporary';
sMDX = '{TM1FilterByLevel( {['|sDimensionName_Version|'].['|sDimensionName_Version|'].Members}, 0 )}';
SubsetCreate(sDimensionName_Version, sSubsetName_Version, 1);
SubsetMDXSet(sDimensionName_Version, sSubsetName_Version, sMDX);
SubsetMDXSet(sDimensionName_Version, sSubsetName_Version, '');
nVersionMax = SubsetGetSize(sDimensionName_Version, sSubsetName_Version);

CubeClearData(sCubeName_ForInput);

# set view as data source

DataSourceType          = 'VIEW';
DatasourceNameForServer = sCubeName_Movement;
DatasourceNameForClient = sCubeName_Movement;
DatasourceCubeView      = sViewName;

#LogOutput('INFO', 'View created, running loop');
#endregion
#region Metadata
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data
#****Begin: Generated Statements***
#****End: Generated Statements****

LogOutput('INFO', vSourceProduct|' '|vTargetProduct|' '|vSubscriptionPlanMovement);

i = 1;
while(i <= nPeriodMax);
  vPeriod = SubsetGetElementName(sDimensionName_Period, sSubsetName_Period, i);
  j = 1;
  while(j <= nVersionMax);
    vVersion = SubsetGetElementName(sDimensionName_Version, sSubsetName_Version, j);
    
    nValidForSource = max(0, sign(CellGetN('Weight and Limit', vVersion, vPeriod, 'Total', vSourceProduct, 'Switch off weight', 'Value')));
    nValidForTarget = max(0, sign(CellGetN('Weight and Limit', vVersion, vPeriod, 'Total', vTargetProduct, 'Switch on weight', 'Value')));
    
    CellPutN(nValidForSource,     sCubeName_ForInput, vVersion, vPeriod, vSourceProduct, vTargetProduct, vSubscriptionPlanMovement, 'source_flag_mult');
    CellPutN(nValidForTarget,     sCubeName_ForInput, vVersion, vPeriod, vSourceProduct, vTargetProduct, vSubscriptionPlanMovement, 'target_flag_mult');
    
    
    j = j + 1;
  end;
  
  i = i + 1;
end;

#endregion
#region Epilog
#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
